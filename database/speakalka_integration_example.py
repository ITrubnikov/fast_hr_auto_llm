"""
–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Speakalka (–ë–ª–æ–∫ 3) —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é
"""

import asyncpg
import json
from typing import Dict, Any, Optional
from datetime import datetime

DATABASE_URL = "postgresql://hr_user:hr_secure_password_2024@postgres_hr:5432/hr_system"


class SpeakalkaDBIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã Speakalka —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_url: str = DATABASE_URL):
        self.db_url = db_url
    
    async def save_interview_report(
        self, 
        candidate_id: str,
        interview_report: Dict[str, Any],
        round_number: int = 1
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –æ—Ç Speakalka
        
        Args:
            candidate_id: ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (cv_a1b2c3d4e5f6)
            interview_report: –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –æ—Ç LangGraph —Å–∏—Å—Ç–µ–º—ã
            round_number: –ù–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
            
        Returns:
            bool: –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        conn = await asyncpg.connect(self.db_url)
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç—á–µ—Ç–∞ Speakalka
            transcript = self._extract_transcript(interview_report)
            emotion_analysis = interview_report.get('emotion_analysis', {})
            question_scores = interview_report.get('question_evaluations', [])
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            technical_score = self._calculate_average_score(question_scores)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            success = await conn.fetchval(
                """
                SELECT save_speakalka_interview_report($1, $2, $3::JSONB, $4, $5::JSONB, $6::JSONB)
                """,
                candidate_id,
                round_number,
                json.dumps(interview_report),  # –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∫ JSON
                transcript,                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
                json.dumps(emotion_analysis),  # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
                json.dumps(question_scores)    # –û—Ü–µ–Ω–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            )
            
            if success:
                print(f"‚úÖ –û—Ç—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –≤ interview_dialogs
                await self._update_interview_scores(
                    conn, candidate_id, round_number, 
                    interview_report
                )
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è: {candidate_id}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
            return False
        finally:
            await conn.close()
    
    async def _update_interview_scores(
        self, 
        conn, 
        candidate_id: str, 
        round_number: int,
        report: Dict[str, Any]
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ interview_dialogs"""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
        technical_score = self._calculate_average_score(
            report.get('question_evaluations', [])
        )
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        # –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
        emotion_data = report.get('emotion_analysis', {})
        communication_score = self._calculate_communication_score(emotion_data)
        culture_fit_score = self._calculate_culture_fit_score(emotion_data, report)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
        duration = report.get('interview_duration_minutes', 0)
        
        await conn.execute(
            """
            UPDATE interview_dialogs 
            SET 
                technical_score = $3,
                communication_score = $4,
                culture_fit_score = $5,
                duration_minutes = $6,
                updated_at = CURRENT_TIMESTAMP
            WHERE candidate_id = $1 AND round_number = $2
            """,
            candidate_id, round_number,
            technical_score, communication_score, 
            culture_fit_score, duration
        )
    
    def _extract_transcript(self, report: Dict[str, Any]) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ –æ—Ç—á–µ—Ç–∞"""
        transcript_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
        questions_data = report.get('question_evaluations', [])
        for item in questions_data:
            question = item.get('question', '')
            answer = item.get('answer', '')
            
            if question:
                transcript_parts.append(f"ü§ñ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä: {question}")
            if answer:
                transcript_parts.append(f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {answer}")
        
        return "\n\n".join(transcript_parts)
    
    def _calculate_average_score(self, question_scores: list) -> Optional[int]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º"""
        if not question_scores:
            return None
            
        scores = [item.get('score', 0) for item in question_scores if item.get('score')]
        return round(sum(scores) / len(scores)) if scores else None
    
    def _calculate_communication_score(self, emotion_data: Dict[str, Any]) -> Optional[int]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–π"""
        if not emotion_data:
            return None
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        enthusiasm = emotion_data.get('enthusiasm', 0)
        confidence = emotion_data.get('confidence', 0)
        happiness = emotion_data.get('happiness', 0)
        
        # –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        fear = emotion_data.get('fear', 0)
        anxiety = emotion_data.get('anxiety', 0)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        positive_score = (enthusiasm + confidence + happiness) / 3
        negative_impact = (fear + anxiety) / 2
        
        communication_score = max(1, min(10, round((positive_score - negative_impact) * 10)))
        return communication_score
    
    def _calculate_culture_fit_score(
        self, 
        emotion_data: Dict[str, Any], 
        report: Dict[str, Any]
    ) -> Optional[int]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
        if not emotion_data:
            return None
        
        # –§–∞–∫—Ç–æ—Ä—ã –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        enthusiasm = emotion_data.get('enthusiasm', 0)
        confidence = emotion_data.get('confidence', 0)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        avg_score = self._calculate_average_score(
            report.get('question_evaluations', [])
        ) or 5
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ü–µ–Ω–∫—É CV (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –æ–Ω–∞ –µ—Å—Ç—å –≤ –æ—Ç—á–µ—Ç–µ)
        normalized_avg = avg_score / 10.0
        
        culture_score = round(((enthusiasm + confidence) / 2 + normalized_avg) / 2 * 10)
        return max(1, min(10, culture_score))


# ===============================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í SPEAKALKA
# ===============================================

async def save_interview_results_example():
    """
    –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã Speakalka –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
    """
    
    # –ü—Ä–∏–º–µ—Ä –æ—Ç—á–µ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Speakalka
    sample_report = {
        "candidate_id": "cv_a1b2c3d4e5f6",
        "interview_date": "2024-01-15T10:30:00",
        "interview_duration_minutes": 45,
        "total_questions_asked": 8,
        "questions_answered": 7,
        
        "question_evaluations": [
            {
                "question": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Å Python",
                "answer": "–Ø —Ä–∞–±–æ—Ç–∞—é —Å Python —É–∂–µ 3 –≥–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—é Django –∏ FastAPI...",
                "score": 8,
                "evaluation": "–•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç",
                "topic": "python_experience"
            },
            {
                "question": "–ö–∞–∫ –≤—ã —Ä–µ—à–∞–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é?",
                "answer": "–°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–æ–º, –∑–∞—Ç–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é —É–∑–∫–∏–µ –º–µ—Å—Ç–∞...",
                "score": 9,
                "evaluation": "–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
                "topic": "performance_optimization"
            }
        ],
        
        "emotion_analysis": {
            "enthusiasm": 0.7,
            "confidence": 0.8,
            "anxiety": 0.2,
            "happiness": 0.6,
            "fear": 0.1
        },
        
        "interview_summary": {
            "overall_impression": "–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è",
            "strengths": ["–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ"],
            "weaknesses": ["–ù–µ–º–Ω–æ–≥–æ –Ω–µ—Ä–≤–Ω–∏—á–∞–ª –≤ –Ω–∞—á–∞–ª–µ"],
            "recommendation": "–†–µ–∫–æ–º–µ–Ω–¥—É—é –∫ –Ω–∞–π–º—É"
        },
        
        "technical_assessment": {
            "python_knowledge": 8,
            "database_skills": 7,
            "system_design": 6,
            "problem_solving": 9
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    db_integration = SpeakalkaDBIntegration()
    success = await db_integration.save_interview_report(
        candidate_id="cv_a1b2c3d4e5f6",
        interview_report=sample_report,
        round_number=1
    )
    
    if success:
        print("üéâ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")


# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ Speakalka
"""
# –í —Ñ–∞–π–ª–µ services/Speakalka/interview_system/langgraph_interview.py
# –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é:

async def finalize_interview(self, candidate_id: str):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ ...
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    from database.speakalka_integration_example import SpeakalkaDBIntegration
    
    db_integration = SpeakalkaDBIntegration()
    await db_integration.save_interview_report(
        candidate_id=candidate_id,
        interview_report=self.generate_final_report(),
        round_number=1
    )
"""
