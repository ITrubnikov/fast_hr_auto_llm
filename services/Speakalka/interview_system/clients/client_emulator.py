#!/usr/bin/env python3
"""
–≠–º—É–ª—è—Ç–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
"""

import requests
import json
import time
from typing import Dict, Any


class InterviewClientEmulator:
    """–≠–º—É–ª—è—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é."""
    
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url
        self.session = requests.Session()
    
    def create_interview(self, questions: Dict[str, Any], config: Dict[str, Any] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é."""
        url = f"{self.api_base_url}/api/interview/create"
        
        payload = {
            "questions": questions,
            "config": config or {}
        }
        
        try:
            response = self.session.post(url, json=payload)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            return {}
    
    def get_interview_status(self, room_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é."""
        url = f"{self.api_base_url}/api/interview/{room_id}/status"
        
        try:
            response = self.session.get(url)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}
    
    def delete_interview(self, room_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."""
        url = f"{self.api_base_url}/api/interview/{room_id}"
        
        try:
            response = self.session.delete(url)
            response.raise_for_status()
            return True
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            return False


def load_questions_from_file(file_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        return {}


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞."""
    print("üé≠ –≠–º—É–ª—è—Ç–æ—Ä –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client = InterviewClientEmulator()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    questions = load_questions_from_file("technical_questions.json")
    if not questions:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
        return
    
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions)} —Ç–µ–º –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "max_depth": 3,
        "min_score_threshold": 7,
        "max_questions_per_topic": 5,
        "timeout_minutes": 30
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
    print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    result = client.create_interview(questions, config)
    
    if not result:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
        return
    
    room_id = result.get("room_id")
    connection_code = result.get("connection_code")
    
    print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üÜî ID –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
    print(f"üîë –ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_code}")
    print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status')}")
    print(f"‚è∞ –°–æ–∑–¥–∞–Ω–æ: {result.get('created_at')}")
    
    print(f"\nüåê –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print(f"   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:8000")
    print(f"   2. –í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
    print(f"   3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_code}")
    print(f"   4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ò–Ω—Ç–µ—Ä–≤—å—é'")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å—Ç–∞—Ç—É—Å
    print(f"\nüëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("   (–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
    
    try:
        while True:
            status = client.get_interview_status(room_id)
            if status:
                current_status = status.get("status", "unknown")
                is_active = status.get("is_active", False)
                print(f"üìä –°—Ç–∞—Ç—É—Å: {current_status} | –ê–∫—Ç–∏–≤–Ω–æ: {is_active}")
                
                if current_status == "completed":
                    print("üèÅ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    break
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
            
            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            
    except KeyboardInterrupt:
        print(f"\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é...")
        if client.delete_interview(room_id):
            print("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —É–¥–∞–ª–µ–Ω–æ")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é")
    
    print("üëã –≠–º—É–ª—è—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    main()
