#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
"""

import requests
import json
import time


def test_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API —Å–µ—Ä–≤–µ—Ä–∞."""
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Interview System API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    questions = {
        "Java Backend": {
            "id": "java_start",
            "text": "–°–∫–∞–∂–∏—Ç–µ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç?"
        },
        "Spring Framework": {
            "id": "spring_start", 
            "text": "–°–∫–∞–∂–∏—Ç–µ –≤—ã –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π, —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç?"
        }
    }
    
    try:
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é...")
        response = requests.post(
            f"{base_url}/api/interview/create",
            json={"questions": questions}
        )
        
        if response.status_code == 200:
            data = response.json()
            room_id = data["room_id"]
            connection_code = data["connection_code"]
            
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ!")
            print(f"   ID –∫–æ–º–Ω–∞—Ç—ã: {room_id}")
            print(f"   –ö–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_code}")
            print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
            time.sleep(1)
            
            status_response = requests.get(f"{base_url}/api/interview/{room_id}/status")
            if status_response.status_code == 200:
                status_data = status_response.json()
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω: {status_data['status']}")
                print(f"   –ê–∫—Ç–∏–≤–Ω–æ: {status_data['is_active']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
            
            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            web_response = requests.get(f"{base_url}/")
            if web_response.status_code == 200:
                print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
                print(f"   –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(web_response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {web_response.status_code}")
            
            # 4. –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            print("\n4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é...")
            delete_response = requests.delete(f"{base_url}/api/interview/{room_id}")
            if delete_response.status_code == 200:
                print("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —É–¥–∞–ª–µ–Ω–æ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {delete_response.status_code}")
            
            print(f"\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {base_url}")
            print(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {base_url}/docs")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python3 start_server.py")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")


if __name__ == "__main__":
    test_api()
