"""–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–Ω–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka."""

import json
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime
import uuid


class RoomManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    
    def __init__(self):
        self.active_rooms: Dict[str, Dict[str, Any]] = {}
        print("üè† RoomManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def handle_kafka_message(self, message_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Kafka –∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–Ω—Ç–µ—Ä–≤—å—é."""
        try:
            candidate_id = message_data.get('candidateId')
            candidate_name = message_data.get('candidateName', '–ö–∞–Ω–¥–∏–¥–∞—Ç')
            vacancy_title = message_data.get('vacancyTitle', '–ü–æ–∑–∏—Ü–∏—è')
            questions = message_data.get('questionsForApplicant', [])
            
            if not candidate_id:
                print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç candidateId –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                return
                
            print(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate_name}")
            print(f"üÜî Candidate ID: {candidate_id}")
            print(f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_title}")
            print(f"‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
            room_data = await self.create_interview_room(
                candidate_id=candidate_id,
                candidate_name=candidate_name,
                vacancy_title=vacancy_title,
                questions=questions,
                message_data=message_data
            )
            
            if room_data:
                print(f"‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {candidate_id}")
                print(f"üåê URL: http://localhost:8000/room/{candidate_id}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –¥–ª—è {candidate_id}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Kafka: {e}")

    async def create_interview_room(
        self, 
        candidate_id: str, 
        candidate_name: str,
        vacancy_title: str,
        questions: list,
        message_data: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–Ω—Ç–µ—Ä–≤—å—é."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–Ω–∞—Ç–∞
            if candidate_id in self.active_rooms:
                print(f"‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ {candidate_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return self.active_rooms[candidate_id]
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            room_data = {
                "room_id": candidate_id,
                "candidate_name": candidate_name,
                "vacancy_title": vacancy_title,
                "created_at": datetime.now().isoformat(),
                "status": "created",
                "questions": questions,
                "message_data": message_data,
                "interview_system": None,  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                "websocket": None,  # –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–Ω–∞—Ç—É
            self.active_rooms[candidate_id] = room_data
            
            print(f"üìù –ö–æ–º–Ω–∞—Ç–∞ {candidate_id} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate_name}")
            print(f"üíº –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_title}")
            print(f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
            
            return room_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã {candidate_id}: {e}")
            return None

    def get_room(self, room_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ ID."""
        return self.active_rooms.get(room_id)

    def get_all_rooms(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã."""
        return self.active_rooms.copy()

    def remove_room(self, room_id: str) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É."""
        if room_id in self.active_rooms:
            del self.active_rooms[room_id]
            print(f"üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ {room_id} —É–¥–∞–ª–µ–Ω–∞")
            return True
        return False

    def update_room_status(self, room_id: str, status: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã."""
        if room_id in self.active_rooms:
            self.active_rooms[room_id]["status"] = status
            self.active_rooms[room_id]["updated_at"] = datetime.now().isoformat()
            print(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã {room_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
            return True
        return False

    def set_room_websocket(self, room_id: str, websocket) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã."""
        if room_id in self.active_rooms:
            self.active_rooms[room_id]["websocket"] = websocket
            print(f"üîå WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")
            return True
        return False

    def set_room_interview_system(self, room_id: str, interview_system) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã."""
        if room_id in self.active_rooms:
            self.active_rooms[room_id]["interview_system"] = interview_system
            print(f"ü§ñ –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã {room_id}")
            return True
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç
_room_manager: Optional[RoomManager] = None


def get_room_manager() -> RoomManager:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç."""
    global _room_manager
    if _room_manager is None:
        _room_manager = RoomManager()
    return _room_manager
