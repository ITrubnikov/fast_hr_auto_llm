#!/usr/bin/env python3
"""LangGraph-based adaptive technical interview system."""

import json
import asyncio
import numpy as np
from typing import Dict, List, Any, Optional, TypedDict
from dataclasses import dataclass
from pathlib import Path
from datetime import datetime

from langgraph.graph import StateGraph, END
from langgraph.prebuilt import ToolNode
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é interview_system
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent / "interview_system"))

from interview_system import (
    DriverFactory,
    create_drivers_from_config
)

# Kafka imports
from kafka_producer import publish_report_to_kafka
from interview_system.emotion_analyzer import EmotionAnalyzer


@dataclass
class Question:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞."""
    id: str
    text: str
    topic: str
    difficulty: int  # 1-5, –≥–¥–µ 5 - —Å–∞–º—ã–π —Å–ª–æ–∂–Ω—ã–π
    follow_up_questions: List[str] = None  # –°–ø–∏—Å–æ–∫ ID —Å–ª–µ–¥—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ


@dataclass
class Answer:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞."""
    question_id: str
    answer_text: str
    score: int  # 1-10
    evaluation: str  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ü–µ–Ω–∫–∏
    timestamp: str
    emotion_analysis: Optional[Dict[str, Any]] = None  # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π


class InterviewState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è LangGraph."""
    current_question: Optional[Question]
    answers: List[Answer]
    asked_questions: List[str]  # ID –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    current_topic: Optional[str]
    topic_depth: int  # –ì–ª—É–±–∏–Ω–∞ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–º—É
    max_depth: int  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞
    min_score_threshold: int  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ–º—ã
    is_complete: bool
    interview_report: Optional[Dict[str, Any]]
    websocket: Optional[Any]  # WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ


class TechnicalInterviewSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏."""
    
    def __init__(
        self,
        questions: Dict[str, Any],
        config_file: str = "interview_config.json",
        candidate_name: str = "–ê–ª–µ–∫—Å–µ–π"
    ):
        self.questions = questions
        self.config_file = config_file
        self.candidate_name = candidate_name
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self._load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.llm = ChatOpenAI(
            api_key=self.config['openai_api_key'],
            model="gpt-4o",
            temperature=0.1
        )
        
        # –°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        driver_config = self.config.get('drivers', {})
        self.drivers = create_drivers_from_config(driver_config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥—Ä–∞–π–≤–µ—Ä—ã
        for driver in self.drivers.values():
            driver.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä–∞–π–≤–µ—Ä—ã
        self.audio_input_driver = self.drivers.get('audio_input')
        self.audio_output_driver = self.drivers.get('audio_output')
        self.tts_driver = self.drivers.get('tts')
        self.asr_driver = self.drivers.get('asr')
        
        # –î–µ—Ç–µ–∫—Ç–æ—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        speech_config = self.config.get('speech_detection', {})
        audio_input_config = self.config.get('drivers', {}).get('audio_input', {}).get('config', {})
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        required_speech_params = ['silence_duration', 'min_speech_duration', 'threshold']
        required_audio_params = ['sample_rate', 'chunk_size']
        
        for param in required_speech_params:
            if param not in speech_config:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä speech_detection.{param} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        for param in required_audio_params:
            if param not in audio_input_config:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä drivers.audio_input.config.{param} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ä–µ—á–∏ - SpeechBrain + Wav2Vec2
        from modern_speech_detector import ModernSpeechDetector
        self.speech_detector = ModernSpeechDetector(
            config=speech_config,
            sample_rate=audio_input_config['sample_rate'],
            chunk_size=audio_input_config['chunk_size']
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —ç–º–æ—Ü–∏–π
        self.emotion_analyzer = EmotionAnalyzer()
        self.emotion_analyzer.initialize()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.raw_questions = questions
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        self.questions = self._process_questions()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
        self.graph = self._create_graph()
    
    def _process_questions(self) -> Dict[str, Question]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        questions = {}
        for topic, q_data in self.raw_questions.items():
            question = Question(
                id=q_data['id'],
                text=q_data['text'],
                topic=topic,
                difficulty=1,  # –í—Å–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–º–µ—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å 1
                follow_up_questions=[]
            )
            questions[topic] = question
        
        return questions
    
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        default_config = {
            "max_depth": 3,
            "min_score_threshold": 7,
            "max_questions_per_topic": 5,
            "evaluation_prompt": "–û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ —à–∫–∞–ª–µ 1-10, –≥–¥–µ 10 - –æ—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –£—á—Ç–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.",
            "topics": ["Java Backend", "Spring Framework", "Database Design", "System Architecture"]
        }
        
        if Path(self.config_file).exists():
            with open(self.config_file, 'r', encoding='utf-8') as f:
                config = json.load(f)
                default_config.update(config)
        
        return default_config
    
    def _create_graph(self) -> StateGraph:
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ LangGraph."""
        workflow = StateGraph(InterviewState)
        
        # –î–æ–±–∞–≤–∏—Ç—å —É–∑–ª—ã
        workflow.add_node("select_question", self._select_question)
        workflow.add_node("ask_question", self._ask_question)
        workflow.add_node("get_answer", self._get_answer)
        workflow.add_node("evaluate_answer", self._evaluate_answer)
        workflow.add_node("update_state", self._update_state)
        workflow.add_node("generate_report", self._generate_report)
        
        # –î–æ–±–∞–≤–∏—Ç—å —Ä—ë–±—Ä–∞
        workflow.set_entry_point("select_question")
        
        workflow.add_edge("select_question", "ask_question")
        workflow.add_edge("ask_question", "get_answer")
        workflow.add_edge("get_answer", "evaluate_answer")
        workflow.add_edge("evaluate_answer", "update_state")
        
        # –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        workflow.add_conditional_edges(
            "update_state",
            self._should_continue,
            {
                "continue_topic": "select_question",
                "next_topic": "select_question", 
                "complete": "generate_report"
            }
        )
        
        workflow.add_edge("generate_report", END)
        
        return workflow.compile()
    
    async def _select_question(self, state: InterviewState) -> InterviewState:
        """–í—ã–±—Ä–∞—Ç—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
        print(f"\nüîç –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞...")
        print(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {state.get('current_topic', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')}")
        print(f"–ì–ª—É–±–∏–Ω–∞ —Ç–µ–º—ã: {state.get('topic_depth', 0)}")
        print(f"–ó–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {state.get('asked_questions', [])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
        if state.get('is_complete', False):
            print("üèÅ –ò–Ω—Ç–µ—Ä–≤—å—é —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞")
            return state
        
        # –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
        if not state.get('current_topic'):
            # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
            topics = list(self.questions.keys())
            state['current_topic'] = topics[0]
            state['topic_depth'] = 0
            print(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–µ–º–∞={topics[0]}, –≥–ª—É–±–∏–Ω–∞=0")
        
        topic = state['current_topic']
        asked_questions = state.get('asked_questions', [])
        topic_depth = state.get('topic_depth', 0)
        
        if topic_depth == 0:
            # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ - –±–µ—Ä–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            if topic in self.questions and self.questions[topic].id not in asked_questions:
                question = self.questions[topic]
                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö
                if 'asked_questions' not in state:
                    state['asked_questions'] = []
                state['asked_questions'].append(question.id)
            else:
                # –≠—Ç–∞ —Ç–µ–º–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                self._move_to_next_topic(state)
                # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if state.get('is_complete', False):
                    return state
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
                return await self._select_question(state)
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ChatGPT
            question = await self._generate_next_question(state)
            if not question:
                # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
                self._move_to_next_topic(state)
                # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if state.get('is_complete', False):
                    return state
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã
                return await self._select_question(state)
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ self.questions –¥–ª—è –æ—Ç—á–µ—Ç–∞
        self.questions[question.id] = question
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–Ω—ã—Ö
        if 'asked_questions' not in state:
            state['asked_questions'] = []
        state['asked_questions'].append(question.id)
        
        state['current_question'] = question
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å: {question.text[:50]}...")
        
        return state
    
    async def _generate_next_question(self, state: InterviewState) -> Optional[Question]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ChatGPT."""
        print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ChatGPT...")
        
        topic = state['current_topic']
        topic_depth = state.get('topic_depth', 0)
        answers = state.get('answers', [])
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
        context = self._create_question_generation_context(state)
        
        # –õ–æ–≥–∏—Ä—É–µ–º context –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üîç CONTEXT –¥–ª—è ChatGPT:")
        print(f"üìã {context}")
        print(f"üë§ –ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {self.candidate_name}")
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
        generation_prompt = f"""
        –í—ã - HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥, —É–≥–ª—É–±–ª—è—è—Å—å –≤ —Ç–µ–º—É "{topic}" –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
        {context}
        
        –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:
        - –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ø–æ –∏–º–µ–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "{self.candidate_name}" –∏–ª–∏ "–≤—ã")
        - –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç
        - –ó–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –æ–ø—ã—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!", "–û—Ç–ª–∏—á–Ω–æ!", "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ..."
        - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ –∂–∏–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞, –∞ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å—É:
        1. –£–≥–ª—É–±–ª—è–π—Ç–µ—Å—å –≤ —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–≥–ª—É–±–∏–Ω–∞ {topic_depth + 1})
        2. –ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç –æ–ø—ã—Ç
        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        4. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        5. –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        6. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        
        –ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è:
        - "–û—Ç–ª–∏—á–Ω–æ, {self.candidate_name}! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –≤–∞—à –æ–ø—ã—Ç —Å Django - –∫–∞–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞ –ø—Ä–æ–µ–∫—Ç—ã –≤—ã –¥–µ–ª–∞–ª–∏?"
        - "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –æ–ø—ã—Ç! –ê –∫–∞–∫ –≤—ã —Ä–µ—à–∞–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–∫–∞–∑–æ–≤?"
        - "–•–æ—Ä–æ—à–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ?"
        
        –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {{"text": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", "difficulty": —á–∏—Å–ª–æ_–æ—Ç_1_–¥–æ_5}}
        """
        
        try:
            messages = [
                SystemMessage(content="–í—ã - –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–µ–¥–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏, —É–≥–ª—É–±–ª—è—è—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω."),
                HumanMessage(content=generation_prompt)
            ]
            
            response = await self.llm.ainvoke(messages)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                content = response.content.strip()
                if content.startswith('```json'):
                    content = content[7:]  # –£–±–∏—Ä–∞–µ–º ```json
                if content.endswith('```'):
                    content = content[:-3]  # –£–±–∏—Ä–∞–µ–º ```
                content = content.strip()
                
                question_data = json.loads(content)
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Question –∏–∑ JSON
                question = Question(
                    id=f"{topic.lower().replace(' ', '_')}_generated_{topic_depth}",
                    text=question_data['text'],
                    topic=topic,
                    difficulty=question_data.get('difficulty', topic_depth + 1)
                )
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å")
                question_text = response.content.strip()
                if question_text.startswith('"') and question_text.endswith('"'):
                    question_text = question_text[1:-1]  # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
                
                question = Question(
                    id=f"{topic.lower().replace(' ', '_')}_generated_{topic_depth}",
                    text=question_text,
                    topic=topic,
                    difficulty=topic_depth + 1
                )
            
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å: {question.text[:50]}...")
            return question
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return None
    
    def _create_question_generation_context(self, state: InterviewState) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞."""
        context_parts = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
        topic = state.get('current_topic', '')
        topic_depth = state.get('topic_depth', 0)
        context_parts.append(f"–¢–ï–ú–ê –î–ò–ê–õ–û–ì–ê: {topic}")
        context_parts.append(f"–ì–ª—É–±–∏–Ω–∞ –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–º—É: {topic_depth + 1}")
        context_parts.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
        topic_answers = [
            answer for answer in state.get('answers', [])
            if any(q.topic == topic for q in self.questions.values() for q in [q] if q.id == answer.question_id)
        ]
        
        if topic_answers:
            context_parts.append("–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:")
            for i, answer in enumerate(topic_answers[-3:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–≤–µ—Ç–∞
                # –ù–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å
                question = None
                for q in self.questions.values():
                    if q.id == answer.question_id:
                        question = q
                        break
                
                if question:
                    context_parts.append(f"ü§ñ –í–æ–ø—Ä–æ—Å {i}: {question.text}")
                    context_parts.append(f"üë§ –û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {answer.answer_text}")
                    context_parts.append(f"üìä –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞: {answer.score}/10")
                    context_parts.append("")
        else:
            context_parts.append("–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ - –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥.")
        
        context_parts.append("–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π:")
        context_parts.append("- –£–≥–ª—É–±–ª—è–µ—Ç—Å—è –≤ —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        context_parts.append("- –†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        context_parts.append("- –°–æ–∑–¥–∞–µ—Ç –æ—â—É—â–µ–Ω–∏–µ –∂–∏–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")
        
        return "\n".join(context_parts)
    
    async def _ask_question(self, question: Question, websocket) -> None:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        print(f"\nüìù –í–æ–ø—Ä–æ—Å: {question.text}")
        print(f"üé§ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ WebSocket –µ—Å–ª–∏ –µ—Å—Ç—å
        if websocket and hasattr(websocket, 'client_state'):
            try:
                if websocket.client_state.name == "CONNECTED":
                    await websocket.send_text(json.dumps({
                        "type": "question",
                        "question": question.text,
                        "topic": question.topic,
                        "difficulty": question.difficulty
                    }))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ WebSocket: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è TTS
        try:
            print("üîä –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è TTS...")
            print(f"üîä –¢–µ–∫—Å—Ç: {question.text}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS
            self.tts_driver.set_websocket(websocket)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É TTS –≤ –±—Ä–∞—É–∑–µ—Ä
            await self.tts_driver.synthesize_to_browser(question.text)
            print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ TTS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä")
            
            print("üé§ –ì–æ—Ç–æ–≤—ã —Å–ª—É—à–∞—Ç—å –æ—Ç–≤–µ—Ç...")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ TTS –∫–æ–º–∞–Ω–¥—ã: {e}")
            import traceback
            traceback.print_exc()
            print("üìù –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è...")
        
    async def process_audio_response(self, room, websocket, audio_file_path: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            import tempfile
            import os
            import subprocess
            import numpy as np
            
            print(f"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞: {audio_file_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º WebM –≤ WAV –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            wav_file_path = audio_file_path.replace('.webm', '.wav')
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                subprocess.run([
                    'ffmpeg', '-i', audio_file_path, 
                    '-ar', '16000',  # 16kHz sample rate
                    '-ac', '1',      # mono
                    '-y',            # overwrite output file
                    wav_file_path
                ], check=True, capture_output=True)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
                import soundfile as sf
                audio_data, sample_rate = sf.read(wav_file_path)
                
                print(f"‚úÖ –ê—É–¥–∏–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(audio_data)} samples, {sample_rate} Hz")
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ OpenAI API
                print("üîÑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ OpenAI API...")
                answer_text = ""
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenAI Whisper API
                    from openai import OpenAI
                    client = OpenAI(api_key=self.config.get('openai_api_key'))
                    
                    with open(wav_file_path, 'rb') as audio_file:
                        transcript = client.audio.transcriptions.create(
                            model="whisper-1",
                            file=audio_file,
                            language="ru"
                        )
                    answer_text = transcript.text.strip()
                    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {answer_text}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
                    answer_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
                
                # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
                emotion_analysis = None
                try:
                    print("üé≠ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
                    emotion_analysis = self.emotion_analyzer.analyze_emotion(audio_data, sample_rate)
                    print(f"üé≠ –≠–º–æ—Ü–∏—è: {emotion_analysis['primary_emotion']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {emotion_analysis['confidence']:.3f})")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")
                    emotion_analysis = {
                        'primary_emotion': 'error',
                        'confidence': 0.0,
                        'emotions': {},
                        'error': str(e)
                    }
        
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä
                if websocket.client_state.name == "CONNECTED":
                    await websocket.send_text(json.dumps({
                        "type": "answer",
                        "answer": answer_text,
                        "emotion": emotion_analysis['primary_emotion'] if emotion_analysis else 'unknown'
                    }))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é
                await self._process_answer(answer_text, emotion_analysis, room, websocket)
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
                if os.path.exists(wav_file_path):
                    os.unlink(wav_file_path)
                    print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {wav_file_path}")
                else:
                    print(f"‚ö†Ô∏è WAV —Ñ–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {wav_file_path}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                }))
    
    async def _process_answer(self, answer_text: str, emotion_analysis: dict, room, websocket):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            current_question = getattr(room.interview_system, 'current_question', None)
            if not current_question:
                print("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
            import asyncio
        
            answer = Answer(
                question_id=current_question.id,
                answer_text=answer_text,
                score=0,  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ
                evaluation="",
                timestamp=str(asyncio.get_event_loop().time()),
                emotion_analysis=emotion_analysis
            )
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            print("üìä –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞...")
            evaluation_result = await self._evaluate_single_answer(current_question, answer)
            answer.score = evaluation_result['score']
            answer.evaluation = evaluation_result['evaluation']
            
            print(f"üìä –û—Ü–µ–Ω–∫–∞: {answer.score}/10")
            print(f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {answer.evaluation}")
            
            # –û—Ü–µ–Ω–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—É - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            if not hasattr(room.interview_system, 'answers'):
                room.interview_system.answers = []
            room.interview_system.answers.append(answer)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            if not hasattr(room.interview_system, 'asked_questions'):
                room.interview_system.asked_questions = []
            if not hasattr(room.interview_system, 'current_topic'):
                room.interview_system.current_topic = None
            if not hasattr(room.interview_system, 'topic_depth'):
                room.interview_system.topic_depth = 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å —Ç–µ–∫—É—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
            room.interview_system.current_question = current_question
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if websocket and hasattr(websocket, 'client_state'):
                try:
                    if websocket.client_state.name == "CONNECTED":
                        await websocket.send_text(json.dumps({
                            "type": "answer_evaluated",
                            "message": f"–û—Ç–≤–µ—Ç –æ—Ü–µ–Ω–µ–Ω: {answer.score}/10",
                            "score": answer.score,
                            "evaluation": answer.evaluation
                        }))
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
            print("üîÑ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é...")
            await self._continue_interview(room, websocket)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}"
                }))
    
    async def _evaluate_single_answer(self, question, answer):
        """–û—Ü–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ ChatGPT."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            context = f"""
–í–æ–ø—Ä–æ—Å: {question.text}
–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {answer.answer_text}
–≠–º–æ—Ü–∏—è: {answer.emotion_analysis.get('primary_emotion', 'unknown') if answer.emotion_analysis else 'unknown'}
"""
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            evaluation_prompt = f"""
–í—ã - –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø—Ä–æ–≤–æ–¥—è—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 10.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
{context}

–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏:
- 0-3: –û—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π, –Ω–µ –ø–æ —Ç–µ–º–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–∑–Ω–∞–Ω–∏–µ
- 4-6: –û—Ç–≤–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π
- 7-8: –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã
- 9-10: –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç

–í–µ—Ä–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "score": <—á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10>,
    "evaluation": "<–ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ>"
}}
"""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
            response = await self.llm.ainvoke(evaluation_prompt)
            evaluation_text = response.content.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            import json
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                if "```json" in evaluation_text:
                    json_start = evaluation_text.find("```json") + 7
                    json_end = evaluation_text.find("```", json_start)
                    json_text = evaluation_text[json_start:json_end].strip()
                elif "{" in evaluation_text and "}" in evaluation_text:
                    json_start = evaluation_text.find("{")
                    json_end = evaluation_text.rfind("}") + 1
                    json_text = evaluation_text[json_start:json_end]
                else:
                    json_text = evaluation_text
                
                result = json.loads(json_text)
                return {
                    'score': int(result.get('score', 0)),
                    'evaluation': result.get('evaluation', '–û—Ü–µ–Ω–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞')
                }
            except json.JSONDecodeError:
                # Fallback –µ—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è
                return {
                    'score': 5,
                    'evaluation': f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ü–µ–Ω–∫–∏. –û—Ç–≤–µ—Ç ChatGPT: {evaluation_text}"
                }
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                'score': 0,
                'evaluation': f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}"
            }
    
    async def _continue_interview(self, room, websocket):
        """–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_topic = getattr(room.interview_system, 'current_topic', None)
            topic_depth = getattr(room.interview_system, 'topic_depth', 0)
            max_depth = getattr(room.interview_system, 'max_depth', 5)
            min_threshold = getattr(room.interview_system, 'min_score_threshold', 2)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
            if room.interview_system.answers:
                last_answer = room.interview_system.answers[-1]
                score = last_answer.score
                
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
                print(f"–û—Ü–µ–Ω–∫–∞: {score}/10")
                print(f"–ü–æ—Ä–æ–≥: {min_threshold}/10")
                print(f"–ì–ª—É–±–∏–Ω–∞ —Ç–µ–º—ã: {topic_depth}/{max_depth}")
                
                if score >= min_threshold and topic_depth < max_depth:
                    # –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                    print(f"‚úÖ –û—Ç–≤–µ—Ç —Ö–æ—Ä–æ—à–∏–π - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–≥–ª—É–±–∏–Ω–∞: {topic_depth} -> {topic_depth + 1})")
                    room.interview_system.topic_depth = topic_depth + 1
                    await self._generate_follow_up_question(room, websocket)
                else:
                    # –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                    print("‚ùå –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É")
                    await self._move_to_next_initial_question(room, websocket)
            else:
                # –ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                await self._move_to_next_initial_question(room, websocket)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {str(e)}"
                }))
    
    async def _generate_question_with_chatgpt(self, question_text: str, answer_text: str, emotion: str, score: int, answers: list, asked_questions: list) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ChatGPT."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ChatGPT
            context_parts = []
            context_parts.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question_text}")
            context_parts.append(f"–û—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {answer_text}")
            context_parts.append(f"–≠–º–æ—Ü–∏—è: {emotion}")
            context_parts.append(f"–û—Ü–µ–Ω–∫–∞: {score}/10")
            
            if answers:
                context_parts.append("\n–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–æ–≤:")
                for i, ans in enumerate(answers[-3:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–≤–µ—Ç–∞
                    context_parts.append(f"{i}. {ans.answer_text} (–æ—Ü–µ–Ω–∫–∞: {ans.score}/10)")
            
            if asked_questions:
                context_parts.append("\n–ó–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
                for i, q in enumerate(asked_questions[-3:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–æ–ø—Ä–æ—Å–∞
                    context_parts.append(f"{i}. {q.text}")
            
            context = "\n".join(context_parts)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é:

{context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ç–æ—á–Ω—è—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:
1. –î–æ–ª–∂–µ–Ω —É–≥–ª—É–±–ª—è—Ç—å—Å—è –≤ —Ç–µ–º—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
2. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º
3. –î–æ–ª–∂–µ–Ω —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
4. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
5. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
"""
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ChatGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
            messages = [
                SystemMessage(content="–¢—ã - –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –ø—Ä–æ–≤–æ–¥—è—â–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."),
                HumanMessage(content=prompt)
            ]
            
            response = await self.llm.ainvoke(messages)
            generated_question = response.content.strip()
            
            print(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {generated_question}")
            return generated_question
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ChatGPT: {e}")
            return None
    
    async def _generate_follow_up_question(self, room, websocket):
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏ –≤–æ–ø—Ä–æ—Å
            last_answer = room.interview_system.answers[-1]
            current_question = getattr(room.interview_system, 'current_question', None)
            
            if not current_question:
                print("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ")
                await self._move_to_next_initial_question(room, websocket)
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ChatGPT
            follow_up_question = await self._generate_question_with_chatgpt(
                current_question.text,
                last_answer.answer_text,
                last_answer.emotion_analysis['primary_emotion'] if last_answer.emotion_analysis else 'unknown',
                last_answer.score,
                room.interview_system.answers,
                room.interview_system.asked_questions
            )
            
            if follow_up_question:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Question –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                follow_up = Question(
                    id=f"{current_question.id}_followup_{room.interview_system.topic_depth}",
                    text=follow_up_question,
                    topic=current_question.topic,
                    difficulty=min(current_question.difficulty + 1, 5),
                    follow_up_questions=[]
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                room.interview_system.current_question = follow_up
                room.interview_system.asked_questions.append(follow_up)
                
                # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
                await self._ask_question(follow_up, websocket)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å")
                await self._move_to_next_initial_question(room, websocket)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            await self._move_to_next_initial_question(room, websocket)
    
    async def _move_to_next_initial_question(self, room, websocket):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º—É –≤–æ–ø—Ä–æ—Å—É."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ–º
            initial_topics = list(room.interview_system.raw_questions.keys())
            current_topic = getattr(room.interview_system, 'current_topic', None)
            asked_questions = getattr(room.interview_system, 'asked_questions', [])
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            next_topic = None
            for topic in initial_topics:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ
                topic_asked = any(q.topic == topic and q.difficulty == 1 for q in asked_questions)
                if not topic_asked:
                    next_topic = topic
                    break
            
            if next_topic:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
                room.interview_system.current_topic = next_topic
                room.interview_system.topic_depth = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ
                initial_question = room.interview_system.questions[next_topic]
                room.interview_system.current_question = initial_question
                room.interview_system.asked_questions.append(initial_question)
                
                print(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ: {next_topic}")
                
                # –ó–∞–¥–∞–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                await self._ask_question(initial_question, websocket)
            else:
                # –í—Å–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
                print("‚úÖ –í—Å–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é")
                await self._complete_interview(room, websocket)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É: {e}")
            await self._complete_interview(room, websocket)
    
    async def _complete_interview(self, room, websocket):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç."""
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = {
                'candidate_name': getattr(room.interview_system, 'candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç'),
                'total_questions': len(room.interview_system.asked_questions),
                'total_answers': len(room.interview_system.answers),
                'average_score': sum(a.score for a in room.interview_system.answers) / len(room.interview_system.answers) if room.interview_system.answers else 0,
                'questions_asked': [
                    {
                        'id': q.id,
                        'text': q.text,
                        'topic': q.topic,
                        'difficulty': q.difficulty
                    } for q in room.interview_system.asked_questions
                ],
                'answers': [
                    {
                        'question_id': a.question_id,
                        'text': a.answer_text,
                        'score': a.score,
                        'emotion': a.emotion_analysis['primary_emotion'] if a.emotion_analysis else 'unknown',
                        'evaluation': a.evaluation
                    } for a in room.interview_system.answers
                ],
                'completion_time': str(datetime.now())
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Kafka
            try:
                success = publish_report_to_kafka(report)
                if success:
                    print(f"üìä –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Kafka —Ç–æ–ø–∏–∫ step3")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Kafka, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª")
                    # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                    report_file = f"interview_report_{room.room_id}.json"
                    with open(report_file, 'w', encoding='utf-8') as f:
                        json.dump(report, f, ensure_ascii=False, indent=2)
                    print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            except Exception as kafka_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {kafka_error}")
                # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                report_file = f"interview_report_{room.room_id}.json"
                with open(report_file, 'w', encoding='utf-8') as f:
                    json.dump(report, f, ensure_ascii=False, indent=2)
                print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–±–µ–∑ –æ—Ü–µ–Ω–æ–∫)
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "interview_complete",
                    "message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ.",
                    "total_questions": report['total_questions']
                }))
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
    
    async def run_interview_step(self, state):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —à–∞–≥ –∏–Ω—Ç–µ—Ä–≤—å—é."""
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            updated_state = await self._select_question(state)
            if updated_state.get('is_complete', False):
                # –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                await self._complete_interview(updated_state)
                return
            
            next_question = updated_state.get('current_question')
            if not next_question:
                # –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                await self._complete_interview(updated_state)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            self.current_question = next_question
            
            # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            await self._ask_question(updated_state)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
    
    async def _get_answer(self, state: InterviewState) -> InterviewState:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞."""
        print("üé§ –û–∂–∏–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –æ—Ç–≤–µ—Ç–∞
        if state.get('websocket') and hasattr(state['websocket'], 'client_state'):
            try:
                if state['websocket'].client_state.name == "CONNECTED":
                    await state['websocket'].send_text(json.dumps({
                        "type": "waiting_for_answer",
                        "question": state['current_question'].text
                    }))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
        
        # –í –±—Ä–∞—É–∑–µ—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –º—ã –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        state['waiting_for_answer'] = True
        state['answer_received'] = False
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        # –ü–µ—Ä–µ—Ö–æ–¥ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ WebSocket
        return state
    
    async def _evaluate_answer(self, state: InterviewState) -> InterviewState:
        """–û—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        print("ü§ñ –û—Ü–µ–Ω–∫–∞ –æ—Ç–≤–µ—Ç–∞...")
        
        current_answer = state['answers'][-1]
        question = state['current_question']
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        context = self._create_evaluation_context(state)
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        evaluation_prompt = f"""
        {self.config['evaluation_prompt']}
        
        –í–æ–ø—Ä–æ—Å: {question.text}
        –û—Ç–≤–µ—Ç: {current_answer.answer_text}
        
        –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
        {context}
        
        –û—Ü–µ–Ω–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ —à–∫–∞–ª–µ 1-10 –∏ –¥–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
        –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {{"score": —á–∏—Å–ª–æ, "evaluation": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"}}
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI
        messages = [
            SystemMessage(content="–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä–≤—å—é. –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ."),
            HumanMessage(content=evaluation_prompt)
        ]
        
        response = await self.llm.ainvoke(messages)
        
        try:
            # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            content = response.content.strip()
            if content.startswith('```json'):
                content = content[7:]  # –£–±–∏—Ä–∞–µ–º ```json
            if content.endswith('```'):
                content = content[:-3]  # –£–±–∏—Ä–∞–µ–º ```
            content = content.strip()
            
            evaluation = json.loads(content)
            current_answer.score = evaluation['score']
            current_answer.evaluation = evaluation['evaluation']
        except json.JSONDecodeError:
            # Fallback –µ—Å–ª–∏ JSON –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ü–µ–Ω–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            current_answer.score = 5
            current_answer.evaluation = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞"
        except KeyError as e:
            print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –≤ JSON: {e}")
            current_answer.score = 5
            current_answer.evaluation = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–∞"
        
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {current_answer.score}/10")
        print(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {current_answer.evaluation}")
        
        return state
    
    def _create_evaluation_context(self, state: InterviewState) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
        context_parts = []
        
        for answer in state.get('answers', []):
            # –ù–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –ø–æ ID
            question = None
            for q in self.questions.values():
                if q.id == answer.question_id:
                    question = q
                    break
            
            if question:
                context_parts.append(f"–í–æ–ø—Ä–æ—Å: {question.text}")
                context_parts.append(f"–û—Ç–≤–µ—Ç: {answer.answer_text}")
                context_parts.append(f"–û—Ü–µ–Ω–∫–∞: {answer.score}/10")
                context_parts.append("---")
        
        return "\n".join(context_parts)
    
    async def _update_state(self, state: InterviewState) -> InterviewState:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞."""
        current_answer = state['answers'][-1]
        score = current_answer.score
        topic_depth = state.get('topic_depth', 0)
        max_depth = self.config['max_depth']
        min_threshold = self.config['min_score_threshold']
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        print(f"–û—Ü–µ–Ω–∫–∞: {score}/10")
        print(f"–ü–æ—Ä–æ–≥: {min_threshold}/10")
        print(f"–ì–ª—É–±–∏–Ω–∞ —Ç–µ–º—ã: {topic_depth}/{max_depth}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
        if state.get('is_complete', False):
            print("üèÅ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return state
        
        if score >= min_threshold and topic_depth < max_depth:
            # –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–º—É
            new_depth = topic_depth + 1
            state['topic_depth'] = new_depth
            print(f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–º—É - –æ—Ç–≤–µ—Ç —Ö–æ—Ä–æ—à–∏–π (–≥–ª—É–±–∏–Ω–∞: {topic_depth} -> {new_depth})")
        elif topic_depth >= max_depth:
            # –î–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
            print("üìà –î–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω—ã —Ç–µ–º—ã")
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
            self._move_to_next_topic(state)
        else:
            # –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
            print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ - –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–æ—Ä–æ—à–∏–π")
            self._move_to_next_topic(state)
        
        return state
    
    def _move_to_next_topic(self, state: InterviewState):
        """–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ."""
        topics = list(self.questions.keys())
        current_topic = state.get('current_topic')
        
        if current_topic in topics:
            current_index = topics.index(current_topic)
            if current_index + 1 < len(topics):
                state['current_topic'] = topics[current_index + 1]
                state['topic_depth'] = 0
                print(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–º–µ: {state['current_topic']}")
            else:
                # –í—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã
                state['is_complete'] = True
                print("üèÅ –í—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            state['is_complete'] = True
            print("üèÅ –í—Å–µ —Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    def _should_continue(self, state: InterviewState) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
        if state.get('is_complete', False):
            return "complete"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ
        current_topic = state.get('current_topic')
        topics = list(self.questions.keys())
        
        if current_topic in topics:
            current_index = topics.index(current_topic)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º
            if current_index >= len(topics) - 1:
                state['is_complete'] = True
                return "complete"
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Ç–µ–º–æ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞)
        return "continue_topic"
    
    async def _generate_report(self, state: InterviewState) -> InterviewState:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç."""
        print("\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
        emotion_analyses = [answer.emotion_analysis for answer in state['answers'] if answer.emotion_analysis]
        emotion_summary = self.emotion_analyzer.get_emotion_summary(emotion_analyses)
        
        report = {
            "candidate_name": getattr(self, 'candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç'),
            "interview_id": f"interview_{int(datetime.now().timestamp())}",
            "completion_time": str(datetime.now()),
            "total_questions": len(state['answers']),
            "topics_covered": list(set(q.topic for q in self.questions.values() if q.id in state.get('asked_questions', []))),
            "average_score": sum(a.score for a in state['answers']) / len(state['answers']) if state['answers'] else 0,
            "emotion_analysis": {
                "most_common_emotion": emotion_summary['most_common_emotion'],
                "emotion_distribution": emotion_summary['emotion_distribution'],
                "average_confidence": emotion_summary['average_confidence'],
                "total_analyses": emotion_summary['total_analyses']
            },
            "answers": []
        }
        
        for answer in state['answers']:
            # –ù–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å
            question = None
            for q in self.questions.values():
                if q.id == answer.question_id:
                    question = q
                    break
            
            answer_data = {
                "question_id": answer.question_id,
                "question_text": question.text if question else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                "topic": question.topic if question else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞",
                "difficulty": question.difficulty if question else 0,
                "answer_text": answer.answer_text,
                "score": answer.score,
                "evaluation": answer.evaluation,
                "timestamp": answer.timestamp
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if answer.emotion_analysis:
                answer_data["emotion_analysis"] = {
                    "primary_emotion": answer.emotion_analysis['primary_emotion'],
                    "confidence": answer.emotion_analysis['confidence'],
                    "emotions": answer.emotion_analysis['emotions']
                }
            
            report['answers'].append(answer_data)
        
        state['interview_report'] = report
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ Kafka
        try:
            success = publish_report_to_kafka(report)
            if success:
                print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Kafka —Ç–æ–ø–∏–∫ step3")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Kafka, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª")
                # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                with open('technical_interview_report.json', 'w', encoding='utf-8') as f:
                    json.dump(report, f, ensure_ascii=False, indent=2)
                print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ technical_interview_report.json")
        except Exception as kafka_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka: {kafka_error}")
            # Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open('technical_interview_report.json', 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
            print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ technical_interview_report.json")
        
        return state
    
    async def run_interview(self, websocket=None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–•–ù–ò–ß–ï–°–ö–û–ì–û –ò–ù–¢–ï–†–í–¨–Æ")
        print("=" * 50)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        initial_state = InterviewState(
            current_question=None,
            answers=[],
            asked_questions=[],
            current_topic=None,
            topic_depth=0,
            max_depth=self.config['max_depth'],
            min_score_threshold=self.config['min_score_threshold'],
            is_complete=False,
            interview_report=None,
            websocket=websocket  # –î–æ–±–∞–≤–ª—è–µ–º WebSocket –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–≤—å—é
        self.answers = []
        self.asked_questions = []
        self.current_topic = None
        self.topic_depth = 0
        self.current_question = None
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–µ–º—É
            first_topic = list(self.raw_questions.keys())[0]
            self.current_topic = first_topic
            self.topic_depth = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            first_question = self.questions[first_topic]
            self.current_question = first_question
            self.asked_questions.append(first_question)
            
            print(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–º—ã: {first_topic}")
            
            # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._ask_question(first_question, websocket)
            
            # –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª - –∂–¥–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("üé§ –ì–æ—Ç–æ–≤—ã —Å–ª—É—à–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            # –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –º–µ—Ç–æ–¥ - –∂–¥–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            # –ò–Ω—Ç–µ—Ä–≤—å—é –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ process_audio_response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            import traceback
            traceback.print_exc()
        
        # –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
        # return initial_state


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï –ò–ù–¢–ï–†–í–¨–Æ –° –ê–î–ê–ü–¢–ò–í–ù–´–ú–ò –í–û–ü–†–û–°–ê–ú–ò")
    print("=" * 60)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    CONFIG_FILE = "interview_config.json"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not Path(CONFIG_FILE).exists():
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –í–æ–ø—Ä–æ—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    questions = {
        "Java Backend": {
            "id": "java_start",
            "text": "–°–∫–∞–∂–∏—Ç–µ –≤—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç?"
        },
        "Java Core": {
            "id": "java_core_start", 
            "text": "–°–∫–∞–∂–∏—Ç–µ –≤—ã —É–º–Ω—ã–π, —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç?"
        },
        "Spring Framework": {
            "id": "spring_start",
            "text": "–°–∫–∞–∂–∏—Ç–µ –≤—ã –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π, —á–µ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–∞/–Ω–µ—Ç?"
        }
    }
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        system = TechnicalInterviewSystem(
            questions=questions,
            config_file=CONFIG_FILE
        )
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        print(f"  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {system.config['max_depth']}")
        print(f"  - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {system.config['min_score_threshold']}/10")
        
        print("\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é...")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é
        result = await system.run_interview()
        
        print("\nüéâ –ò–ù–¢–ï–†–í–¨–Æ –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 60)
        
        if result['interview_report']:
            report = result['interview_report']
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  - –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {report['total_questions']}")
            print(f"  - –ü–æ–∫—Ä—ã—Ç—ã–µ —Ç–µ–º—ã: {', '.join(report['topics_covered'])}")
            print(f"  - –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {report['average_score']:.1f}/10")
            print(f"  - –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: technical_interview_report.json")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
