#!/usr/bin/env python3
"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤—å—é —Å WebRTC
"""

import asyncio
import json
import uuid
import time
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from pathlib import Path

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import uvicorn

from langgraph_interview import TechnicalInterviewSystem
from room_manager import get_room_manager
from kafka_consumer import start_kafka_consumer


@dataclass
class InterviewRoom:
    """–ö–æ–º–Ω–∞—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é."""
    room_id: str
    questions: Dict[str, Any]
    interview_system: TechnicalInterviewSystem
    created_at: float
    is_active: bool = True
    participants: List[str] = None  # WebSocket connections
    
    def __post_init__(self):
        if self.participants is None:
            self.participants = []


class CreateRoomRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã."""
    questions: Dict[str, Any]
    candidate_name: str = "–ê–ª–µ–∫—Å–µ–π"  # –ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


class JoinRoomRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ."""
    room_code: str


class InterviewServer:
    """–°–µ—Ä–≤–µ—Ä –∏–Ω—Ç–µ—Ä–≤—å—é."""
    
    def __init__(self):
        self.app = FastAPI(title="Interview System API", version="1.0.0")
        self.rooms: Dict[str, InterviewRoom] = {}
        self.active_connections: Dict[str, WebSocket] = {}
        self.room_manager = get_room_manager()
        self.setup_middleware()
        self.setup_routes()
        self.setup_kafka_consumer()
        self.setup_startup_events()
    
    def setup_middleware(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –∏ middleware."""
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )

    def setup_kafka_consumer(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ step1."""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Kafka consumer...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        async def handle_kafka_message(message_data: Dict[str, Any]):
            """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Kafka."""
            try:
                await self.room_manager.handle_kafka_message(message_data)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kafka —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ startup event
        self.kafka_message_handler = handle_kafka_message
        print("‚úÖ Kafka consumer –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    def setup_startup_events(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ startup events."""
        @self.app.on_event("startup")
        async def startup_event():
            """–ó–∞–ø—É—Å–∫ Kafka consumer –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
            print("üöÄ –ó–∞–ø—É—Å–∫ Kafka consumer...")
            print(f"üîß Handler: {self.kafka_message_handler}")
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º Kafka consumer –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                print("üîß –í—ã–∑—ã–≤–∞–µ–º start_kafka_consumer...")
                start_kafka_consumer(self.kafka_message_handler)
                print("‚úÖ Kafka consumer –∑–∞–ø—É—â–µ–Ω")
                # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å startup
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Kafka consumer: {e}")
                import traceback
                traceback.print_exc()
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ API."""
        
        @self.app.get("/")
        async def root():
            return {"message": "Interview System API", "status": "running"}
        
        @self.app.post("/api/rooms/create")
        async def create_room(request: CreateRoomRequest):
            """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –∏–Ω—Ç–µ—Ä–≤—å—é."""
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
                room_code = self.generate_room_code()
                
                # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
                interview_system = TechnicalInterviewSystem(
                    questions=request.questions,
                    config_file="interview_config.json",
                    candidate_name=request.candidate_name
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
                room = InterviewRoom(
                    room_id=room_code,
                    questions=request.questions,
                    interview_system=interview_system,
                    created_at=time.time()
                )
                
                self.rooms[room_code] = room
                
                return {
                    "success": True,
                    "room_code": room_code,
                    "web_url": f"/room/{room_code}",
                    "message": "–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                }
                
            except Exception as e:
                raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: {str(e)}")
        
        @self.app.get("/api/rooms/{room_code}/status")
        async def get_room_status(room_code: str):
            """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–Ω–∞—Ç—ã."""
            if room_code not in self.rooms:
                raise HTTPException(status_code=404, detail="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            room = self.rooms[room_code]
            return {
                "room_id": room.room_id,
                "is_active": room.is_active,
                "participants_count": len(room.participants),
                "created_at": room.created_at
            }
        
        @self.app.websocket("/ws/{room_code}")
        async def websocket_endpoint(websocket: WebSocket, room_code: str):
            """WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ."""
            await websocket.accept()
            
            room_data = self.room_manager.get_room(room_code)
            if not room_data:
                await websocket.close(code=4004, reason="–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            connection_id = str(uuid.uuid4())
            self.active_connections[connection_id] = websocket
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ
                await websocket.send_text(json.dumps({
                    "type": "room_info",
                    "room_code": room_code,
                    "status": "connected"
                }))
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                while True:
                    data = await websocket.receive_text()
                    message = json.loads(data)
                    await self.handle_websocket_message(room_code, connection_id, message)
                    
            except WebSocketDisconnect:
                pass
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
            finally:
                # –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if connection_id in self.active_connections:
                    del self.active_connections[connection_id]
        
        @self.app.get("/room/{room_code}")
        async def room_page(room_code: str):
            """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é."""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ RoomManager
            room_data = self.room_manager.get_room(room_code)
            if not room_data:
                return HTMLResponse(content="<h1>–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>", status_code=404)
            
            html_content = self.get_room_html(room_code, room_data)
            return HTMLResponse(content=html_content)
    
    def generate_room_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã."""
        return str(uuid.uuid4())[:8].upper()
    
    async def handle_websocket_message(self, room_code: str, connection_id: str, message: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket."""
        room_data = self.room_manager.get_room(room_code)
        if not room_data:
            return
            
        websocket = self.active_connections[connection_id]
        
        message_type = message.get("type")
        
        if message_type == "start_interview":
            await self.start_interview(room_code, room_data, websocket)
        elif message_type == "audio_data":
            await self.handle_audio_data(room_code, room_data, websocket, message.get("audio_data"))
        elif message_type == "next_question":
            await self.ask_next_question(room_code, room_data, websocket)
        elif message_type == "end_interview":
            await self.end_interview(room_code, room_data, websocket)
    
    async def start_interview(self, room_code: str, room_data: Dict[str, Any], websocket: WebSocket):
        """–ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if not room_data.get("interview_system"):
                from langgraph_interview import TechnicalInterviewSystem
                
                # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
                questions = room_data.get("questions", [])
                questions_dict = {}
                for i, question in enumerate(questions):
                    questions_dict[f"question_{i}"] = {
                        "id": f"q_{i}",
                        "text": question
                    }
                
                # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é
                interview_system = TechnicalInterviewSystem(questions_dict)
                room_data["interview_system"] = interview_system
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ RoomManager
                self.room_manager.active_rooms[room_code] = room_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ —É–∂–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            if not room_data.get("interview_started", False):
                room_data["interview_started"] = True
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                asyncio.create_task(self.run_interview(room_code, room_data, websocket))
            else:
                print("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–≤—å—é —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã")
            
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "interview_started",
                    "message": "–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å"
                }))
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {str(e)}"
                }))
    
    async def run_interview(self, room_code: str, room_data: Dict[str, Any], websocket: WebSocket):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."""
        try:
            interview_system = room_data.get("interview_system")
            if not interview_system:
                raise Exception("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–µ—Ä–µ–¥–∞—á–µ–π WebSocket
            await interview_system.run_interview(websocket)
            
            # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º interview_completed —Å—Ä–∞–∑—É - –∏–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–æ
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {str(e)}"
                }))
    
    async def handle_audio_data(self, room_code: str, room_data: Dict[str, Any], websocket: WebSocket, audio_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            import base64
            import tempfile
            import os
            import asyncio
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            audio_bytes = base64.b64decode(audio_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.webm', delete=False) as temp_file:
                temp_file.write(audio_bytes)
                temp_audio_path = temp_file.name
                print(f"üìÅ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_audio_path}")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è
                if websocket.client_state.name == "CONNECTED":
                    await websocket.send_text(json.dumps({
                        "type": "audio_received",
                        "message": "–ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
                    }))
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é
                interview_system = room_data.get("interview_system")
                if not interview_system:
                    raise Exception("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –ò–Ω—Ç–µ—Ä–≤—å—é —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                class RoomWrapper:
                    def __init__(self, room_data, interview_system):
                        self.room_data = room_data
                        self.interview_system = interview_system
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        self.room_id = room_data.get("room_id", "unknown")
                        self.participants = []
                
                room_wrapper = RoomWrapper(room_data, interview_system)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–≤—å—é
                await interview_system.process_audio_response(
                    room_wrapper, websocket, temp_audio_path
                )
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_audio_path):
                    os.unlink(temp_audio_path)
                    print(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {temp_audio_path}")
                else:
                    print(f"‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {temp_audio_path}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}"
                }))
    
    async def ask_next_question(self, room_code: str, room_data: Dict[str, Any], websocket: WebSocket):
        """–ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å."""
        try:
            interview_system = room_data.get("interview_system")
            if not interview_system:
                raise Exception("–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–æ–±–µ—Ä—Ç–∫—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            class RoomWrapper:
                def __init__(self, room_data, interview_system):
                    self.room_data = room_data
                    self.interview_system = interview_system
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    self.room_id = room_data.get("room_id", "unknown")
                    self.participants = []
            
            room_wrapper = RoomWrapper(room_data, interview_system)
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
            await interview_system._continue_interview(room_wrapper, websocket)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            if websocket.client_state.name == "CONNECTED":
                await websocket.send_text(json.dumps({
                    "type": "error",
                    "message": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
                }))
    
    async def end_interview(self, room_code: str, room_data: Dict[str, Any], websocket: WebSocket):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é."""
        room_data["status"] = "ended"
        if websocket.client_state.name == "CONNECTED":
            await websocket.send_text(json.dumps({
                "type": "interview_ended",
                "message": "–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            }))
    
    def get_room_html(self, room_code: str, room_data: Dict[str, Any] = None) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–Ω–∞—Ç—ã."""
        candidate_name = room_data.get('candidate_name', '–ö–∞–Ω–¥–∏–¥–∞—Ç') if room_data else '–ö–∞–Ω–¥–∏–¥–∞—Ç'
        vacancy_title = room_data.get('vacancy_title', '–ü–æ–∑–∏—Ü–∏—è') if room_data else '–ü–æ–∑–∏—Ü–∏—è'
        return f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ò–Ω—Ç–µ—Ä–≤—å—é - {room_code}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            text-align: center;
            margin-bottom: 30px;
        }}
        .candidate-info {{
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            border-left: 4px solid #2196f3;
        }}
        .candidate-info h2, .candidate-info h3 {{
            margin: 5px 0;
            color: #333;
        }}
        .candidate-info h2 {{
            color: #1976d2;
        }}
        .room-code {{
            background: #e3f2fd;
            padding: 10px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 18px;
            margin: 10px 0;
        }}
        .status {{
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            text-align: center;
        }}
        .status.connected {{
            background: #e8f5e8;
            color: #2e7d32;
        }}
        .status.disconnected {{
            background: #ffebee;
            color: #c62828;
        }}
        .controls {{
            text-align: center;
            margin: 30px 0;
        }}
        button {{
            background: #2196f3;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin: 10px;
        }}
        button:hover {{
            background: #1976d2;
        }}
        button:disabled {{
            background: #ccc;
            cursor: not-allowed;
        }}
        .interview-area {{
            margin: 20px 0;
            padding: 20px;
            border: 2px dashed #ddd;
            border-radius: 10px;
            text-align: center;
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }}
        .question {{
            font-size: 18px;
            margin: 20px 0;
            padding: 15px;
            background: #f0f8ff;
            border-radius: 5px;
        }}
        .audio-controls {{
            margin: 20px 0;
            display: flex;
            justify-content: center;
            gap: 10px;
            flex-wrap: wrap;
        }}
        .audio-btn {{
            background: #4caf50;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 14px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s;
        }}
        .audio-btn:hover {{
            background: #45a049;
            transform: translateY(-2px);
        }}
        .audio-btn:disabled {{
            background: #ccc;
            cursor: not-allowed;
            transform: none;
        }}
        .audio-btn.recording {{
            background: #f44336;
            animation: pulse 1.5s infinite;
        }}
        .audio-btn.recording:hover {{
            background: #d32f2f;
        }}
        @keyframes pulse {{
            0% {{ transform: scale(1); }}
            50% {{ transform: scale(1.05); }}
            100% {{ transform: scale(1); }}
        }}
        .audio-visualizer {{
            width: 100%;
            height: 60px;
            background: #f5f5f5;
            border-radius: 10px;
            margin: 15px 0;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }}
        .wave-bar {{
            width: 4px;
            background: #2196f3;
            margin: 0 2px;
            border-radius: 2px;
            animation: wave 0.5s ease-in-out infinite alternate;
        }}
        .wave-bar:nth-child(odd) {{
            animation-delay: 0.1s;
        }}
        .wave-bar:nth-child(even) {{
            animation-delay: 0.3s;
        }}
        @keyframes wave {{
            0% {{ height: 10px; }}
            100% {{ height: 40px; }}
        }}
        .audio-player {{
            width: 100%;
            margin: 15px 0;
        }}
        .audio-player audio {{
            width: 100%;
            height: 40px;
        }}
        .recording-status {{
            font-size: 16px;
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            color: #856404;
        }}
        .recording-status.recording {{
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }}
        
        .completion-summary {{
            background: #e8f5e8;
            padding: 20px;
            border-radius: 8px;
            margin: 10px 0;
            border-left: 4px solid #4caf50;
            text-align: center;
        }}
        
        .completion-summary h2 {{
            color: #2e7d32;
            margin: 0 0 15px 0;
        }}
        
        .stats {{
            background: white;
            padding: 15px;
            border-radius: 6px;
            margin: 15px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        
        .stats p {{
            margin: 8px 0;
            font-size: 16px;
        }}
        .answer {{
            font-size: 16px;
            margin: 10px 0;
            padding: 10px;
            background: #f9f9f9;
            border-radius: 5px;
        }}
        .logs {{
            background: #f5f5f5;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 12px;
            max-height: 300px;
            overflow-y: auto;
            margin: 20px 0;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé§ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ò–Ω—Ç–µ—Ä–≤—å—é</h1>
            <div class="candidate-info">
                <h2>üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate_name}</h2>
                <h3>üíº –í–∞–∫–∞–Ω—Å–∏—è: {vacancy_title}</h3>
            </div>
            <div class="room-code">–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room_code}</div>
            <div id="status" class="status disconnected">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</div>
        </div>
        
        <div class="controls">
            <button id="startBtn" onclick="startInterview()" disabled>–ù–∞—á–∞—Ç—å –ò–Ω—Ç–µ—Ä–≤—å—é</button>
            <button id="endBtn" onclick="endInterview()" disabled>–ó–∞–≤–µ—Ä—à–∏—Ç—å</button>
        </div>
        
        <div class="interview-area" id="interviewArea">
            <p>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –ò–Ω—Ç–µ—Ä–≤—å—é" –¥–ª—è –Ω–∞—á–∞–ª–∞</p>
        </div>
        
        <div class="audio-controls" id="audioControls" style="display: none;">
            <button class="audio-btn" id="recordBtn" onclick="toggleRecording()">
                <span id="recordIcon">üé§</span>
                <span id="recordText">–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å</span>
            </button>
            <button class="audio-btn" id="stopBtn" onclick="stopRecording()" disabled>
                <span>‚èπÔ∏è</span>
                <span>–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</span>
            </button>
            <button class="audio-btn" id="sendBtn" onclick="sendRecording()" disabled>
                <span>üì§</span>
                <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç</span>
            </button>
        </div>
        
        <div class="audio-visualizer" id="audioVisualizer" style="display: none;">
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
            <div class="wave-bar"></div>
        </div>
        
        <div class="recording-status" id="recordingStatus" style="display: none;">
            <span id="statusText">–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏</span>
        </div>
        
        <div class="audio-player" id="audioPlayer" style="display: none;">
            <audio id="questionAudio" controls></audio>
        </div>
        
        <div class="logs" id="logs"></div>
    </div>

    <script>
        let ws = null;
        let isInterviewActive = false;
        let mediaRecorder = null;
        let audioChunks = [];
        let isRecording = false;
        let audioContext = null;
        let analyser = null;
        let microphone = null;
        let animationId = null;
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
        function connectWebSocket() {{
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${{protocol}}//${{window.location.host}}/ws/{room_code}`;
            
            ws = new WebSocket(wsUrl);
            
            ws.onopen = function() {{
                updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ', 'connected');
                document.getElementById('startBtn').disabled = false;
                addLog('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }};
            
            ws.onmessage = function(event) {{
                const message = JSON.parse(event.data);
                handleMessage(message);
            }};
            
            ws.onclose = function() {{
                updateStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ', 'disconnected');
                document.getElementById('startBtn').disabled = true;
                document.getElementById('endBtn').disabled = true;
                addLog('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
            }};
            
            ws.onerror = function(error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ WebSocket: ' + error);
            }};
        }}
        
        function updateStatus(text, className) {{
            const statusEl = document.getElementById('status');
            statusEl.textContent = text;
            statusEl.className = 'status ' + className;
        }}
        
        function addLog(message) {{
            const logsEl = document.getElementById('logs');
            const time = new Date().toLocaleTimeString();
            logsEl.innerHTML += `[${{time}}] ${{message}}<br>`;
            logsEl.scrollTop = logsEl.scrollHeight;
        }}
        
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
        async function initAudio() {{
            try {{
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
                analyser = audioContext.createAnalyser();
                analyser.fftSize = 256;
                
                addLog('üéµ –ê—É–¥–∏–æ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
                return true;
            }} catch (error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ: ' + error.message);
                return false;
            }}
        }}
        
        async function toggleRecording() {{
            if (isRecording) {{
                stopRecording();
            }} else {{
                await startRecording();
            }}
        }}
        
        async function startRecording() {{
            try {{
                const stream = await navigator.mediaDevices.getUserMedia({{ 
                    audio: {{ 
                        echoCancellation: true, 
                        noiseSuppression: true,
                        sampleRate: 16000
                    }} 
                }});
                
                mediaRecorder = new MediaRecorder(stream, {{
                    mimeType: 'audio/webm;codecs=opus'
                }});
                
                audioChunks = [];
                
                mediaRecorder.ondataavailable = (event) => {{
                    if (event.data.size > 0) {{
                        audioChunks.push(event.data);
                    }}
                }};
                
                mediaRecorder.onstop = () => {{
                    const audioBlob = new Blob(audioChunks, {{ type: 'audio/webm' }});
                    const audioUrl = URL.createObjectURL(audioBlob);
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    window.currentAudioBlob = audioBlob;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                    document.getElementById('sendBtn').disabled = false;
                    document.getElementById('recordBtn').disabled = false;
                    document.getElementById('recordText').textContent = '–ó–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ';
                    
                    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                    document.getElementById('recordingStatus').style.display = 'none';
                    
                    addLog('‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
                }};
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                microphone = audioContext.createMediaStreamSource(stream);
                microphone.connect(analyser);
                
                mediaRecorder.start();
                isRecording = true;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                document.getElementById('recordBtn').classList.add('recording');
                document.getElementById('recordBtn').disabled = true;
                document.getElementById('stopBtn').disabled = false;
                document.getElementById('sendBtn').disabled = true;
                document.getElementById('audioVisualizer').style.display = 'flex';
                document.getElementById('recordingStatus').style.display = 'block';
                document.getElementById('statusText').textContent = '–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å...';
                document.getElementById('statusText').parentElement.classList.add('recording');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                startVisualization();
                
                addLog('üé§ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å');
                
            }} catch (error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ' + error.message);
            }}
        }}
        
        function stopRecording() {{
            if (mediaRecorder && isRecording) {{
                mediaRecorder.stop();
                isRecording = false;
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                stopVisualization();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                document.getElementById('recordBtn').classList.remove('recording');
                document.getElementById('stopBtn').disabled = true;
                document.getElementById('audioVisualizer').style.display = 'none';
                document.getElementById('recordingStatus').style.display = 'none';
                
                addLog('‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            }}
        }}
        
        function startVisualization() {{
            const bars = document.querySelectorAll('.wave-bar');
            
            function animate() {{
                if (!isRecording) return;
                
                const dataArray = new Uint8Array(analyser.frequencyBinCount);
                analyser.getByteFrequencyData(dataArray);
                
                bars.forEach((bar, index) => {{
                    const value = dataArray[index] || 0;
                    const height = Math.max(10, (value / 255) * 50);
                    bar.style.height = height + 'px';
                }});
                
                animationId = requestAnimationFrame(animate);
            }}
            
            animate();
        }}
        
        function stopVisualization() {{
            if (animationId) {{
                cancelAnimationFrame(animationId);
                animationId = null;
            }}
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –±–∞—Ä–æ–≤
            const bars = document.querySelectorAll('.wave-bar');
            bars.forEach(bar => {{
                bar.style.height = '10px';
            }});
        }}
        
        async function sendRecording() {{
            if (!window.currentAudioBlob) {{
                addLog('‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
                return;
            }}
            
            try {{
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const arrayBuffer = await window.currentAudioBlob.arrayBuffer();
                const base64Audio = btoa(String.fromCharCode(...new Uint8Array(arrayBuffer)));
                
                if (ws && ws.readyState === WebSocket.OPEN) {{
                    ws.send(JSON.stringify({{
                        type: 'audio_data',
                        audio_data: base64Audio,
                        format: 'webm'
                    }}));
                    
                    addLog('üì§ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    document.getElementById('sendBtn').disabled = true;
                    document.getElementById('recordText').textContent = '–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å';
                    document.getElementById('stopBtn').disabled = true;
                    window.currentAudioBlob = null;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    document.getElementById('recordingStatus').style.display = 'block';
                    document.getElementById('statusText').textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...';
                    document.getElementById('statusText').parentElement.classList.remove('recording');
                }}
            }} catch (error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: ' + error.message);
            }}
        }}
        
        function playQuestionAudio(audioData) {{
            try {{
                const audioBlob = new Blob([audioData], {{ type: 'audio/mp3' }});
                const audioUrl = URL.createObjectURL(audioBlob);
                const audioElement = document.getElementById('questionAudio');
                
                audioElement.src = audioUrl;
                audioElement.style.display = 'block';
                document.getElementById('audioPlayer').style.display = 'block';
                
                audioElement.play().then(() => {{
                    addLog('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ (OpenAI TTS)');
                }}).catch(error => {{
                    addLog('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ' + error.message);
                }});
                
            }} catch (error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ: ' + error.message);
            }}
        }}
        
        function speakText(text, voice = 'alloy', language = 'ru') {{
            try {{
                if ('speechSynthesis' in window) {{
                    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                    speechSynthesis.cancel();
                    
                    const utterance = new SpeechSynthesisUtterance(text);
                    utterance.voice = getVoice(voice, language);
                    utterance.rate = 0.9;
                    utterance.pitch = 1.0;
                    utterance.volume = 1.0;
                    
                    utterance.onstart = () => {{
                        addLog('üó£Ô∏è –ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞');
                    }};
                    
                    utterance.onend = () => {{
                        addLog('‚úÖ –í–æ–ø—Ä–æ—Å –æ–∑–≤—É—á–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
                    }};
                    
                    utterance.onerror = (event) => {{
                        addLog('‚ùå –û—à–∏–±–∫–∞ TTS: ' + event.error);
                    }};
                    
                    speechSynthesis.speak(utterance);
                }} else {{
                    addLog('‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Web Speech API');
                }}
            }} catch (error) {{
                addLog('‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ TTS: ' + error.message);
            }}
        }}
        
        function getVoice(voiceName, language) {{
            const voices = speechSynthesis.getVoices();
            
            // –ò—â–µ–º –≥–æ–ª–æ—Å –ø–æ —è–∑—ã–∫—É –∏ –∏–º–µ–Ω–∏
            let voice = voices.find(v => v.lang.startsWith(language) && v.name.includes(voiceName));
            
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ —è–∑—ã–∫—É
            if (!voice) {{
                voice = voices.find(v => v.lang.startsWith(language));
            }}
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
            if (!voice && voices.length > 0) {{
                voice = voices[0];
            }}
            
            return voice;
        }}
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if ('speechSynthesis' in window) {{
            speechSynthesis.onvoiceschanged = () => {{
                const voices = speechSynthesis.getVoices();
                addLog(`üó£Ô∏è –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${{voices.length}}`);
            }};
        }}
        
        function handleMessage(message) {{
            addLog(`üì® –ü–æ–ª—É—á–µ–Ω–æ: ${{message.type}}`);
            
            switch(message.type) {{
                case 'room_info':
                    addLog('üè† –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞');
                    break;
                    
                case 'interview_started':
                    isInterviewActive = true;
                    document.getElementById('startBtn').disabled = true;
                    document.getElementById('endBtn').disabled = false;
                    document.getElementById('audioControls').style.display = 'flex';
                    document.getElementById('interviewArea').innerHTML = '<p>üé§ –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å! –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å</p>';
                    addLog('üéâ –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å');
                    break;
                    
                case 'interview_completed':
                    isInterviewActive = false;
                    document.getElementById('startBtn').disabled = false;
                    document.getElementById('endBtn').disabled = true;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    const totalQuestions = message.total_questions || 0;
                    
                    document.getElementById('interviewArea').innerHTML = `
                        <div class="completion-summary">
                            <h2>‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</h2>
                            <div class="stats">
                                <p><strong>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤:</strong> ` + totalQuestions + `</p>
                            </div>
                            <p>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤—å—é!</p>
                        </div>
                    `;
                    addLog(`üèÅ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ (` + totalQuestions + ` –≤–æ–ø—Ä–æ—Å–æ–≤)`);
                    break;
                    
                case 'question':
                    document.getElementById('interviewArea').innerHTML = 
                        `<div class="question">üìù –í–æ–ø—Ä–æ—Å: ${{message.question}}</div>`;
                    addLog(`‚ùì –í–æ–ø—Ä–æ—Å: ${{message.question}}`);
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∏—Ö
                    if (message.audio_data) {{
                        try {{
                            const audioData = Uint8Array.from(atob(message.audio_data), c => c.charCodeAt(0));
                            playQuestionAudio(audioData);
                        }} catch (error) {{
                            addLog('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å–∞: ' + error.message);
                        }}
                    }}
                    break;
                    
                case 'audio_data':
                    addLog(`üîä –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –æ—Ç OpenAI TTS`);
                    try {{
                        const audioData = Uint8Array.from(atob(message.audio_data), c => c.charCodeAt(0));
                        playQuestionAudio(audioData);
                    }} catch (error) {{
                        addLog('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ: ' + error.message);
                    }}
                    break;
                    
                case 'tts_speak':
                    addLog(`üó£Ô∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ TTS: ${{message.text}}`);
                    speakText(message.text, message.voice, message.language);
                    break;
                    
                case 'answer':
                    document.getElementById('interviewArea').innerHTML += 
                        `<div class="answer">üí¨ –û—Ç–≤–µ—Ç: ${{message.answer}}</div>`;
                    addLog(`üí¨ –û—Ç–≤–µ—Ç: ${{message.answer}}`);
                    break;
                    
                case 'waiting_for_answer':
                    document.getElementById('interviewArea').innerHTML = 
                        `<div class="question">üìù –í–æ–ø—Ä–æ—Å: ${{message.question}}</div>
                         <p>üé§ –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø–∏—Å–∏ –æ—Ç–≤–µ—Ç–∞. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" –∏ –≥–æ–≤–æ—Ä–∏—Ç–µ, –∑–∞—Ç–µ–º "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ</p>`;
                    addLog(`‚ùì –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${{message.question}}`);
                    break;
                    
                case 'audio_received':
                    document.getElementById('recordingStatus').style.display = 'block';
                    document.getElementById('statusText').textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...';
                    document.getElementById('statusText').parentElement.classList.remove('recording');
                    addLog('üîÑ ' + message.message);
                    break;
                    
                case 'evaluation':
                    // –û—Ü–µ–Ω–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
                    addLog(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
                    break;
                    
                case 'error':
                    addLog(`‚ùå –û—à–∏–±–∫–∞: ${{message.message}}`);
                    break;
            }}
        }}
        
        function startInterview() {{
            if (ws && ws.readyState === WebSocket.OPEN) {{
                ws.send(JSON.stringify({{
                    type: 'start_interview'
                }}));
                addLog('üöÄ –ó–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            }}
        }}
        
        function endInterview() {{
            if (ws && ws.readyState === WebSocket.OPEN) {{
                ws.send(JSON.stringify({{
                    type: 'end_interview'
                }}));
                addLog('üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
            }}
        }}
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.onload = async function() {{
            await initAudio();
            connectWebSocket();
        }};
    </script>
</body>
</html>
        """


def main():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞."""
    server = InterviewServer()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("üì° API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000/room/{room_code}")
    print("üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    
    uvicorn.run(
        server.app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )


if __name__ == "__main__":
    main()
