"""Kafka consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ step1 –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç –∏–Ω—Ç–µ—Ä–≤—å—é."""

import json
import os
import time
import asyncio
from typing import Dict, Any, Optional, Callable
from kafka import KafkaConsumer
from kafka.errors import KafkaError, NoBrokersAvailable


class InterviewKafkaConsumer:
    """Kafka consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ step1."""
    
    def __init__(self, message_handler: Callable[[Dict[str, Any]], None]):
        self.kafka_bootstrap = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "").strip()
        self.kafka_topic_step1 = "step1"  # –¢–æ–ø–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.kafka_connect_max_retries = int(os.getenv("KAFKA_CONNECT_MAX_RETRIES", "8") or 8)
        self.kafka_connect_backoff_seconds = float(os.getenv("KAFKA_CONNECT_BACKOFF_SECONDS", "2") or 2)
        self.kafka_consumer: Optional[KafkaConsumer] = None
        self.message_handler = message_handler
        self.is_running = False
        
        if self.kafka_bootstrap:
            print(f"üîç Kafka Consumer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç–æ–ø–∏–∫–∞: {self.kafka_topic_step1}")
        else:
            print("‚ö†Ô∏è KAFKA_BOOTSTRAP_SERVERS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def _build_kafka_config(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Kafka consumer."""
        servers = [s.strip() for s in self.kafka_bootstrap.split(",") if s.strip()]
        cfg = {
            "bootstrap_servers": servers,
            "value_deserializer": lambda m: json.loads(m.decode('utf-8')),
            "key_deserializer": lambda k: k.decode('utf-8') if k else None,
            "auto_offset_reset": "latest",
            "enable_auto_commit": True,
            "group_id": "interview_system_consumer",
            "session_timeout_ms": 30000,
            "heartbeat_interval_ms": 10000,
            "max_poll_records": 1,
            "consumer_timeout_ms": 1000,
        }
        
        # SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞)
        ssl_cafile = os.getenv("KAFKA_SSL_CAFILE")
        if ssl_cafile:
            cfg["security_protocol"] = "SSL"
            cfg["ssl_cafile"] = ssl_cafile
            
        return cfg

    def _create_kafka_consumer(self) -> KafkaConsumer:
        """–°–æ–∑–¥–∞—Ç—å Kafka consumer."""
        cfg = self._build_kafka_config()
        consumer = KafkaConsumer(self.kafka_topic_step1, **cfg)
        return consumer

    def _ensure_kafka_connected_with_retries(self) -> bool:
        """–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ Kafka –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
        if not self.kafka_bootstrap:
            print("‚ùå KAFKA_BOOTSTRAP_SERVERS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False
            
        # –ë—ã—Å—Ç—Ä—ã–π —É—Å–ø–µ—à–Ω—ã–π –ø—É—Ç—å
        if self.kafka_consumer is not None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ consumer –∞–∫—Ç–∏–≤–µ–Ω
                _ = self.kafka_consumer.topics()
                return True
            except Exception:
                self.kafka_consumer = None

        attempts = 0
        backoff = max(self.kafka_connect_backoff_seconds, 0.5)
        last_error: Optional[Exception] = None
        
        while attempts < self.kafka_connect_max_retries:
            attempts += 1
            try:
                self.kafka_consumer = self._create_kafka_consumer()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞
                try:
                    topics = self.kafka_consumer.topics()
                    if self.kafka_topic_step1 in topics:
                        print(f"‚úÖ Kafka Consumer –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ {attempts} –ø–æ–ø—ã—Ç–æ–∫")
                        return True
                    else:
                        print(f"‚ö†Ô∏è –¢–æ–ø–∏–∫ {self.kafka_topic_step1} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return False
                except Exception:
                    pass
                return True
            except (NoBrokersAvailable, KafkaError, Exception) as e:
                last_error = e
                if attempts < self.kafka_connect_max_retries:
                    print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{self.kafka_connect_max_retries} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
                    time.sleep(backoff)
                    backoff = min(backoff * 1.5, 30.0)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, –º–∞–∫—Å 30 —Å–µ–∫
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka –ø–æ—Å–ª–µ {attempts} –ø–æ–ø—ã—Ç–æ–∫: {last_error}")
                    return False

        return False

    async def start_consuming(self):
        """–ù–∞—á–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka."""
        if not self._ensure_kafka_connected_with_retries():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka –¥–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
            
        self.is_running = True
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–æ–ø–∏–∫–∞ {self.kafka_topic_step1}")
        print(f"üîß Consumer –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: bootstrap_servers={self.kafka_bootstrap}")
        
        try:
            while self.is_running:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    message_batch = self.kafka_consumer.poll(timeout_ms=1000)
                    
                    if message_batch:
                        for topic_partition, messages in message_batch.items():
                            for message in messages:
                                try:
                                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {topic_partition.topic}")
                                    print(f"üìã –ö–ª—é—á: {message.key}")
                                    
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    await self._process_message(message.value)
                                    
                                except Exception as e:
                                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                                    continue
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    self.kafka_consumer = None
                    if not self._ensure_kafka_connected_with_retries():
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka")
                        break
                    time.sleep(1)
                    
        except KeyboardInterrupt:
            print("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        finally:
            self.stop_consuming()

    async def _process_message(self, message_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        try:
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {message_data.get('candidateName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üÜî Candidate ID: {message_data.get('candidateId', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            if self.message_handler:
                await self.message_handler(message_data)
            else:
                print("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def stop_consuming(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        self.is_running = False
        if self.kafka_consumer:
            try:
                self.kafka_consumer.close()
                print("‚úÖ Kafka Consumer –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Kafka Consumer: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä consumer
_kafka_consumer: Optional[InterviewKafkaConsumer] = None


def get_kafka_consumer(message_handler: Callable[[Dict[str, Any]], None]) -> InterviewKafkaConsumer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Kafka consumer."""
    global _kafka_consumer
    if _kafka_consumer is None:
        _kafka_consumer = InterviewKafkaConsumer(message_handler)
    return _kafka_consumer


def start_kafka_consumer(message_handler: Callable[[Dict[str, Any]], None]):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Kafka consumer."""
    print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka consumer...")
    consumer = get_kafka_consumer(message_handler)
    print("üîß Consumer –ø–æ–ª—É—á–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å startup
    import threading
    
    def run_consumer():
        print("üîß –ó–∞–ø—É—Å–∫ consumer –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        try:
            print("üîß –ó–∞–ø—É—Å–∫ start_consuming...")
            loop.run_until_complete(consumer.start_consuming())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ consumer: {e}")
            import traceback
            traceback.print_exc()
        finally:
            loop.close()
    
    thread = threading.Thread(target=run_consumer, daemon=True)
    thread.start()
    print("‚úÖ Kafka consumer –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º consumer –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    return consumer
