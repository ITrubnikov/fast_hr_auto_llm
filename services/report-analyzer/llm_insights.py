# LLM-powered –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤

import os
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.schema.output_parser import StrOutputParser
from typing import Dict, Any, Optional
import json

class CandidateInsightGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–º–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é LLM"""
    
    def __init__(self):
        self.enabled = os.getenv("LLM_ENABLED", "false").lower() == "true"
        self.openrouter_api_key = os.getenv("OPENROUTER_API_KEY")
        self.openrouter_base_url = "https://openrouter.ai/api/v1"
        
        if self.enabled and self.openrouter_api_key:
            self.llm = ChatOpenAI(
                model="openai/gpt-4o-mini",
                temperature=0.3,
                api_key=self.openrouter_api_key,
                base_url=self.openrouter_base_url,
                max_tokens=1000
            )
        else:
            self.llm = None
        
        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        self.analysis_prompt = PromptTemplate(
            input_variables=["candidate_data", "vacancy_title"],
            template="""
            –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç HR —Å 10+ –ª–µ—Ç –æ–ø—ã—Ç–∞. –ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {vacancy_title}.
            
            –î–ê–ù–ù–´–ï –ö–ê–ù–î–ò–î–ê–¢–ê:
            {candidate_data}
            
            –ó–ê–î–ê–ß–ê: –°–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏:

            1. –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –†–ï–ó–Æ–ú–ï (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) - –∫–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
            
            2. –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ (3-5 –ø—É–Ω–∫—Ç–æ–≤) - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            
            3. –û–ë–õ–ê–°–¢–ò –†–ê–ó–í–ò–¢–ò–Ø (2-4 –ø—É–Ω–∫—Ç–∞) - –Ω–∞–≤—ã–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
            
            4. –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:
               - hired: –µ—Å–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç –æ–∂–∏–¥–∞–Ω–∏—è  
               - rejected: –µ—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
               - additional_interview: –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
               - manual_review: –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ
               
            5. –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ó–ê–†–ü–õ–ê–¢–´ (–¥–ª—è hired) - –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö
            
            6. –£–†–û–í–ï–ù–¨ –£–í–ï–†–ï–ù–ù–û–°–¢–ò –≤ –æ—Ü–µ–Ω–∫–µ
            
            –í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –ø–æ–∑–∏—Ü–∏–∏, —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –æ–ø—ã—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
            
            –û—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {{
                "summary": "–¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞",
                "strengths": ["–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1", "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2", "..."],
                "development_areas": ["–æ–±–ª–∞—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è 1", "–æ–±–ª–∞—Å—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è 2"],
                "recommendation": "hired|rejected|additional_interview|manual_review",
                "salary_range": "–¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ä—É–±–ª—è—Ö (–µ—Å–ª–∏ hired) –∏–ª–∏ null",
                "confidence": "–≤—ã—Å–æ–∫–∞—è|—Å—Ä–µ–¥–Ω—è—è|–Ω–∏–∑–∫–∞—è"
            }}
            """
        )
    
    def generate_insights(self, candidate_data: Dict[str, Any], vacancy_title: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–µ –≤—ã–≤–æ–¥—ã –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ"""
        
        if not self.enabled or not self.llm:
            return {
                "summary": "ü§ñ LLM –∞–Ω–∞–ª–∏–∑ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                "strengths": ["–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"],
                "development_areas": ["–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"], 
                "recommendation": "manual_review",
                "salary_range": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
                "confidence": "–Ω–∏–∑–∫–∞—è"
            }
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM
            formatted_data = self._format_candidate_data(candidate_data)
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É: –ø—Ä–æ–º–ø—Ç ‚Üí LLM ‚Üí –ø–∞—Ä—Å–µ—Ä
            chain = self.analysis_prompt | self.llm | StrOutputParser()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ LLM
            result = chain.invoke({
                "candidate_data": formatted_data,
                "vacancy_title": vacancy_title
            })
            
            # –ü–∞—Ä—Å–∏–Ω–≥ JSON –æ—Ç–≤–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ markdown –±–ª–æ–∫–µ)
            try:
                parsed_json = self._extract_json_from_response(result)
                return parsed_json
            except (json.JSONDecodeError, ValueError) as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM: {result}")
                # –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                return {
                    "summary": "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ LLM",
                    "strengths": ["–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"],
                    "development_areas": ["–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"],
                    "recommendation": "manual_review", 
                    "salary_range": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
                    "confidence": "–Ω–∏–∑–∫–∞—è"
                }
                
        except Exception as e:
            return {
                "summary": f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                "strengths": ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"],
                "development_areas": ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"],
                "recommendation": "manual_review",
                "salary_range": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", 
                "confidence": "–Ω–∏–∑–∫–∞—è"
            }
    
    def _format_candidate_data(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è LLM"""
        cv_score = data.get('cv_score', '–Ω/–¥')
        interview_score = data.get('interview_score', '–Ω/–¥')
        overall_score = data.get('overall_score', '–Ω/–¥')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ –æ—Ü–µ–Ω–∫–∞–º
        def get_level(score):
            if score == '–Ω/–¥' or score is None:
                return '–Ω–µ –æ—Ü–µ–Ω–µ–Ω–æ'
            if score >= 8:
                return '–≤—ã—Å–æ–∫–∏–π'
            elif score >= 6:
                return '—Å—Ä–µ–¥–Ω–∏–π'
            else:
                return '–Ω–∏–∑–∫–∏–π'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
        interview_section = ""
        if data.get('interview_details'):
            interview_section = f"""
=== –î–ï–¢–ê–õ–ò –ò–ù–¢–ï–†–í–¨–Æ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã) ===
{data.get('interview_details')}
"""
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ  
        decision_section = ""
        if data.get('final_decision'):
            decision_section = f"""
=== –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï HR ===
‚Ä¢ –†–µ—à–µ–Ω–∏–µ: {data.get('final_decision', '–Ω/–¥')}
‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {overall_score}/10 (—É—Ä–æ–≤–µ–Ω—å: {get_level(overall_score)})
‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è: {data.get('decision_reason', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {data.get('salary_offer', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
"""
        
        return f"""
=== –ü–†–û–§–ò–õ–¨ –ö–ê–ù–î–ò–î–ê–¢–ê ===
–ò–º—è: {data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø—Ä–æ—Ü–µ—Å—Å–∞: {data.get('current_stage', '–Ω/–¥')}

=== –ê–ù–ê–õ–ò–ó –†–ï–ó–Æ–ú–ï (–ë–õ–û–ö 1) ===
‚Ä¢ –û—Ü–µ–Ω–∫–∞ CV: {cv_score}/10 (—É—Ä–æ–≤–µ–Ω—å: {get_level(cv_score if cv_score != '–Ω/–¥' else 0)})
‚Ä¢ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏: {data.get('cv_reasoning', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
‚Ä¢ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {', '.join(data.get('key_strengths', ['–ù–µ —É–∫–∞–∑–∞–Ω—ã']))}
‚Ä¢ –ó–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–∏—Å–∫–∏: {', '.join(data.get('concerns', ['–ù–µ—Ç –∑–∞–º–µ—á–∞–Ω–∏–π']))}

=== –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ï (–ë–õ–û–ö 2-3) ===
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {'–î–∞' if data.get('interview_scheduled') else '–ù–µ—Ç'}
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {'–î–∞' if data.get('interview_completed') else '–ù–µ—Ç'}
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {interview_score}/10 (—É—Ä–æ–≤–µ–Ω—å: {get_level(interview_score if interview_score != '–Ω/–¥' else 0)})
‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {data.get('total_questions', 0)} | –û—Ç–≤–µ—á–µ–Ω–æ: {data.get('answered_questions', 0)}
‚Ä¢ –†–µ–∑—é–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞: {data.get('dialog_summary', '–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ')}{interview_section}{decision_section}

=== –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –†–ï–®–ï–ù–ò–Æ ===
‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {('–í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã' if cv_score != '–Ω/–¥' and interview_score != '–Ω/–¥' else '–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ü–µ–Ω–∫—É')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {data.get('current_stage', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}
        """
    
    def generate_quick_summary(self, candidate_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–µ—Ä—Ö-–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        
        if not self.enabled or not self.llm:
            return "ü§ñ –ö—Ä–∞—Ç–∫–∏–π –ò–ò-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        try:
            quick_prompt = PromptTemplate(
                input_variables=["candidate_data"],
                template="""
                –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–∞–π –û–î–ù–û –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ:
                
                {candidate_data}
                
                –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                "[–ö–∞—á–µ—Å—Ç–≤–æ] –∫–∞–Ω–¥–∏–¥–∞—Ç: [–≥–ª–∞–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞], [–∫—Ä–∞—Ç–∫–∏–π –≤–µ—Ä–¥–∏–∫—Ç]"
                
                –ü—Ä–∏–º–µ—Ä—ã:
                - "–°–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç: –æ—Ç–ª–∏—á–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ (CV 9/10), —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∫ –Ω–∞–π–º—É"
                - "–°—Ä–µ–¥–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ (CV 6/10), –Ω—É–∂–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏"
                - "–°–ª–∞–±—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è Senior —Ä–æ–ª–∏, —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å Junior"
                
                –ë–ï–ó –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –û–ë–™–Ø–°–ù–ï–ù–ò–ô. –¢–û–õ–¨–ö–û –û–î–ù–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï.
                """
            )
            
            formatted_data = self._format_candidate_data(candidate_data)
            chain = quick_prompt | self.llm | StrOutputParser()
            
            result = chain.invoke({"candidate_data": formatted_data})
            return result.strip()
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}"
    
    def _extract_json_from_response(self, response: str) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ LLM, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –≤ markdown –±–ª–æ–∫–µ"""
        import re
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        response = response.strip()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ markdown –±–ª–æ–∫–µ
        json_pattern = r'```(?:json)?\s*(\{.*?\})\s*```'
        match = re.search(json_pattern, response, re.DOTALL)
        
        if match:
            json_str = match.group(1)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç markdown –±–ª–æ–∫–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
            json_pattern = r'(\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\})'
            match = re.search(json_pattern, response, re.DOTALL)
            if match:
                json_str = match.group(1)
            else:
                json_str = response
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            return json.loads(json_str)
        except json.JSONDecodeError:
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            cleaned = re.sub(r'[^\{\}"\[\]:,\s\w\-\.\/]', '', json_str)
            return json.loads(cleaned)


class PatternAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ HR –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏–π)"""
    
    def __init__(self):
        self.llm = None  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ v2.0
    
    def analyze_hiring_patterns(self, candidates_data: list) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞–π–º–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        
        # TODO: v2.0 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        # - –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –æ—Ü–µ–Ω–∫–æ–π CV –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
        # - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º  
        # - –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        # - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è HR –ø—Ä–æ—Ü–µ—Å—Å–∞
        
        return {"message": "–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ v2.0"}
