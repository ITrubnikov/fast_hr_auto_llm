import streamlit as st
import asyncio
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
from datetime import datetime
import uuid
from report_generator import HRReportDatabase, ReportAnalyzer, CandidateReport
from llm_insights import CandidateInsightGenerator
from typing import Optional, List, Dict, Any
import json


class StreamlitReportApp:
    """Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö"""
    
    def __init__(self):
        self.db = HRReportDatabase()
        self.analyzer = ReportAnalyzer()
        self.insights_generator = CandidateInsightGenerator()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.set_page_config(
            page_title="HR Analytics | –û—Ç—á–µ—Ç—ã –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö",
            page_icon="üìä",
            layout="wide",
            initial_sidebar_state="expanded"
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session state
        if 'report_data' not in st.session_state:
            st.session_state.report_data = None
        if 'candidates_list' not in st.session_state:
            st.session_state.candidates_list = []
        if 'ai_insights' not in st.session_state:
            st.session_state.ai_insights = None
        if 'ai_summary' not in st.session_state:
            st.session_state.ai_summary = None
    
    def render_header(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        st.markdown("""
        <div style="background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); 
                    padding: 20px; border-radius: 10px; margin-bottom: 30px;">
            <h1 style="color: white; text-align: center; margin: 0;">
                üìä HR Analytics - –û—Ç—á–µ—Ç—ã –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö
            </h1>
            <p style="color: white; text-align: center; margin: 10px 0 0 0; opacity: 0.9;">
                –ë–ª–æ–∫ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    def render_sidebar(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø–æ–∏—Å–∫–æ–º"""
        st.sidebar.markdown("## üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        candidate_id = st.sidebar.text_input(
            "ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
            placeholder="cv_a8f9e2b1c4d7",
            help="–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        if st.sidebar.button("üîç –ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", type="primary"):
            if candidate_id and candidate_id.strip():
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
                report = asyncio.run(self.db.get_candidate_report(candidate_id.strip()))
                st.session_state.report_data = report
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AI –∏–Ω—Å–∞–π—Ç—ã –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
                st.session_state.ai_insights = None
                st.session_state.ai_summary = None
                
                if not report:
                    st.sidebar.error(f"‚ùå –ö–∞–Ω–¥–∏–¥–∞—Ç —Å ID '{candidate_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    st.sidebar.success("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω!")
            else:
                st.sidebar.error("‚ùå –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        
        st.sidebar.markdown("---")
        
        # –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        if st.sidebar.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"):
            candidates = asyncio.run(self.db.get_candidates_list())
            st.session_state.candidates_list = candidates
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
        if st.session_state.candidates_list:
            st.sidebar.markdown("### üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
            for candidate in st.session_state.candidates_list[:10]:
                status_emoji = {
                    'completed': '‚úÖ',
                    'interviewed': 'üé§',
                    'scheduled': 'üìÖ',
                    'analyzed': 'üìÑ',
                    'new': 'üÜï'
                }.get(candidate['status'], '‚ùì')
                
                if st.sidebar.button(
                    f"{status_emoji} {candidate['candidate_name'][:20]}",
                    key=f"candidate_{candidate['candidate_id']}"
                ):
                    report = asyncio.run(self.db.get_candidate_report(candidate['candidate_id']))
                    st.session_state.report_data = report
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º AI –∏–Ω—Å–∞–π—Ç—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞
                    st.session_state.ai_insights = None
                    st.session_state.ai_summary = None
    
    def render_progress_chart(self, status_data: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        completed = status_data['completed_stages']
        total = status_data['total_stages']
        remaining = total - completed
        
        fig = go.Figure(data=[go.Pie(
            labels=['–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–û—Å—Ç–∞–ª–æ—Å—å'],
            values=[completed, remaining],
            hole=0.6,
            marker_colors=['#28a745', '#e9ecef'],
            showlegend=False,
            textinfo='none'
        )])
        
        fig.add_annotation(
            text=f"{status_data['progress_percent']:.0f}%<br><span style='font-size: 14px;'>–∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>",
            x=0.5, y=0.5,
            font_size=24,
            showarrow=False
        )
        
        fig.update_layout(
            title="–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            height=200,
            margin=dict(t=40, b=0, l=0, r=0)
        )
        
        return fig
    
    def render_scores_chart(self, rating_data: Dict[str, Any]) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –æ—Ü–µ–Ω–æ–∫"""
        scores = []
        labels = []
        colors = []
        
        if rating_data['cv_score'] is not None:
            scores.append(rating_data['cv_score'])
            labels.append('–ê–Ω–∞–ª–∏–∑ CV')
            colors.append('#ff7f0e')
        
        if rating_data['interview_score'] is not None:
            scores.append(rating_data['interview_score'])
            labels.append('–ò–Ω—Ç–µ—Ä–≤—å—é')
            colors.append('#2ca02c')
        
        if rating_data['final_score'] is not None:
            scores.append(rating_data['final_score'])
            labels.append('–ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞')
            colors.append('#d62728')
        
        if not scores:
            return None
        
        fig = go.Figure(data=[
            go.Bar(x=labels, y=scores, marker_color=colors)
        ])
        
        fig.update_layout(
            title="–û—Ü–µ–Ω–∫–∏ –ø–æ —ç—Ç–∞–ø–∞–º",
            yaxis_title="–ë–∞–ª–ª (–∏–∑ 10)",
            yaxis=dict(range=[0, 10]),
            height=300,
            showlegend=False
        )
        
        return fig
    
    def render_timeline(self, report: CandidateReport) -> go.Figure:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        events = []
        
        # CV Analysis
        if report.cv_score is not None:
            events.append({
                'stage': '–ê–Ω–∞–ª–∏–∑ CV',
                'date': datetime.now(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
                'status': 'completed',
                'score': report.cv_score
            })
        
        # Interview Scheduled
        if report.interview_scheduled:
            events.append({
                'stage': '–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                'date': report.interview_date or datetime.now(),
                'status': 'completed' if report.interview_completed else 'pending',
                'score': None
            })
        
        # Interview Completed
        if report.interview_completed:
            events.append({
                'stage': '–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–µ–Ω–æ',
                'date': datetime.now(),
                'status': 'completed',
                'score': report.interview_score
            })
        
        # Final Decision
        if report.final_decision:
            events.append({
                'stage': '–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ',
                'date': report.decision_date or datetime.now(),
                'status': 'completed',
                'score': report.overall_score
            })
        
        if not events:
            return None
        
        df = pd.DataFrame(events)
        
        fig = px.timeline(
            df,
            x_start='date',
            x_end='date',
            y='stage',
            color='status',
            title="–í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"
        )
        
        fig.update_layout(height=300)
        return fig
    
    def render_candidate_report(self, report: CandidateReport):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        st.markdown(f"""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    padding: 25px; border-radius: 15px; margin-bottom: 30px; color: white;">
            <h2 style="margin: 0; font-size: 28px;">üë§ {report.candidate_name}</h2>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">
                üéØ {report.vacancy_title} | üÜî {report.candidate_id}
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        rating_data = self.analyzer.calculate_overall_rating(report)
        status_data = self.analyzer.get_process_status(report)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥",
                f"{rating_data['total_score']}/10",
                delta=rating_data['rating']
            )
        
        with col2:
            st.metric(
                "–ü—Ä–æ–≥—Ä–µ—Å—Å",
                f"{status_data['completed_stages']}/{status_data['total_stages']}",
                delta=status_data['current_stage']
            )
        
        with col3:
            if report.cv_score:
                st.metric("–û—Ü–µ–Ω–∫–∞ CV", f"{report.cv_score}/10")
            else:
                st.metric("–û—Ü–µ–Ω–∫–∞ CV", "–ù–µ –æ—Ü–µ–Ω–µ–Ω–æ")
        
        with col4:
            if report.interview_score:
                st.metric("–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é", f"{report.interview_score}/10")
            else:
                st.metric("–û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é", "–ù–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        chart_col1, chart_col2 = st.columns(2)
        
        with chart_col1:
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_fig = self.render_progress_chart(status_data)
            st.plotly_chart(progress_fig, use_container_width=True)
        
        with chart_col2:
            # –ì—Ä–∞—Ñ–∏–∫ –æ—Ü–µ–Ω–æ–∫
            scores_fig = self.render_scores_chart(rating_data)
            if scores_fig:
                st.plotly_chart(scores_fig, use_container_width=True)
        
        # AI-–∞–Ω–∞–ª–∏–∑ —Å–µ–∫—Ü–∏—è
        st.markdown("## üß† –ò–ò-–∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ AI —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if st.session_state.ai_summary:
                st.markdown("### ‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –ò–ò")
                if "–°–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç" in st.session_state.ai_summary:
                    st.success(f"üéØ {st.session_state.ai_summary}")
                elif "–°—Ä–µ–¥–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç" in st.session_state.ai_summary:
                    st.warning(f"ü§î {st.session_state.ai_summary}")
                elif "–°–ª–∞–±—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç" in st.session_state.ai_summary:
                    st.error(f"‚ö†Ô∏è {st.session_state.ai_summary}")
                else:
                    st.info(f"ü§ñ {st.session_state.ai_summary}")
            else:
                st.info("ü§ñ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
        
        with col2:
            if st.button("‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ", help="–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏"):
                with st.spinner("‚ö° –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é..."):
                    candidate_dict = {
                        'name': report.candidate_name,
                        'cv_score': report.cv_score,
                        'cv_reasoning': report.cv_reasoning,
                        'key_strengths': report.key_strengths or [],
                        'concerns': report.concerns or [],
                        'interview_score': report.interview_score,
                        'dialog_summary': report.dialog_summary,
                        'current_stage': status_data['current_stage']
                    }
                    st.session_state.ai_summary = self.insights_generator.generate_quick_summary(candidate_dict)
                    st.rerun()
        
        with col3:
            if st.button("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", help="–ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"):
                with st.spinner("üß† –°–æ–∑–¥–∞—é –æ—Ç—á–µ—Ç..."):
                    # –ü–æ–¥—Ä–æ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
                    interview_details = ""
                    if report.dialog_details:
                        interview_qa = []
                        for i, detail in enumerate(report.dialog_details[:5], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 Q&A
                            qa = f"Q{i}: {detail.get('question', '')}\nA{i}: {detail.get('answer', '')}"
                            if detail.get('score'):
                                qa += f" (–û—Ü–µ–Ω–∫–∞: {detail.get('score')}/10)"
                            if detail.get('comment'):
                                qa += f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {detail.get('comment')}"
                            interview_qa.append(qa)
                        interview_details = "\n\n".join(interview_qa)
                    
                    candidate_dict = {
                        'name': report.candidate_name,
                        'cv_score': report.cv_score,
                        'cv_reasoning': report.cv_reasoning,
                        'key_strengths': report.key_strengths or [],
                        'concerns': report.concerns or [],
                        'interview_score': report.interview_score,
                        'dialog_summary': report.dialog_summary,
                        'interview_details': interview_details,
                        'total_questions': report.total_questions,
                        'answered_questions': report.answered_questions,
                        'current_stage': status_data['current_stage'],
                        'final_decision': report.final_decision,
                        'decision_reason': report.decision_reason,
                        'overall_score': report.overall_score,
                        'salary_offer': report.salary_offer,
                        'interview_scheduled': report.interview_scheduled,
                        'interview_completed': report.interview_completed
                    }
                    st.session_state.ai_insights = self.insights_generator.generate_insights(
                        candidate_dict, 
                        report.vacancy_title
                    )
                    st.rerun()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ—Å—Ç—å
        if st.session_state.ai_insights:
            insights = st.session_state.ai_insights
            
            # –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ
            st.markdown("---")
            st.markdown("### üìã –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞")
            summary_text = insights.get("summary", "–ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –í—ã–¥–µ–ª—è–µ–º —Ä–µ–∑—é–º–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–Ω–∞
            if any(word in summary_text.lower() for word in ['–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç', '–æ—Ç–ª–∏—á–Ω', '–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω', '—Ä–µ–∫–æ–º–µ–Ω–¥—É—é']):
                st.success(f"‚úÖ {summary_text}")
            elif any(word in summary_text.lower() for word in ['—Å—Ä–µ–¥–Ω–∏–π', '–±–∞–∑–æ–≤—ã–π', '—Ç—Ä–µ–±—É–µ—Ç']):
                st.warning(f"ü§î {summary_text}")
            elif any(word in summary_text.lower() for word in ['–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤', '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω', '—Å–ª–∞–±—ã–π']):
                st.error(f"‚ùå {summary_text}")
            else:
                st.info(f"üìä {summary_text}")
            
            # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∏ –æ–±–ª–∞—Å—Ç–µ–π —Ä–∞–∑–≤–∏—Ç–∏—è
            ai_col1, ai_col2 = st.columns(2)
            
            with ai_col1:
                st.markdown("**üí™ –ò–ò: –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã**")
                for strength in insights.get("strengths", []):
                    st.success(f"‚úÖ {strength}")
            
            with ai_col2:
                st.markdown("**üìà –ò–ò: –û–±–ª–∞—Å—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è**")
                for area in insights.get("development_areas", []):
                    st.warning(f"‚ö†Ô∏è {area}")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendation = insights.get("recommendation", "manual_review")
            confidence = insights.get("confidence", "—Å—Ä–µ–¥–Ω—è—è")
            salary = insights.get("salary_range", "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ")
            
            st.markdown("### üéØ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
            
            if recommendation == "hired":
                st.success(f"‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:** –ù–ê–ù–Ø–¢–¨ ({confidence} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
                st.info(f"üí∞ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:** {salary}")
            elif recommendation == "rejected":
                st.error(f"‚ùå **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:** –û–¢–ö–õ–û–ù–ò–¢–¨ ({confidence} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
            elif recommendation == "additional_interview":
                st.warning(f"ü§î **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:** –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ò–ù–¢–ï–†–í–¨–Æ ({confidence} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
            else:
                st.info(f"üîç **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ò–ò:** –†–£–ß–ù–û–ô –ê–ù–ê–õ–ò–ó ({confidence} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)")
        
        st.markdown("---")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø–∞–º
        st.markdown("## üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
        if any([report.cv_score, report.interview_scheduled, report.interview_completed, report.final_decision]):
            tabs = []
            tab_names = []
            
            if report.cv_score is not None:
                tab_names.append("üìÑ –ê–Ω–∞–ª–∏–∑ CV")
            if report.interview_scheduled:
                tab_names.append("üìÖ –ò–Ω—Ç–µ—Ä–≤—å—é")
            if report.interview_completed:
                tab_names.append("üé§ –î–∏–∞–ª–æ–≥")
            if report.final_decision:
                tab_names.append("‚úÖ –†–µ—à–µ–Ω–∏–µ")
            
            if tab_names:
                tabs = st.tabs(tab_names)
                
                tab_idx = 0
                
                # –¢–∞–± –∞–Ω–∞–ª–∏–∑–∞ CV
                if report.cv_score is not None:
                    with tabs[tab_idx]:
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.markdown(f"**üìä –û—Ü–µ–Ω–∫–∞:** {report.cv_score}/10")
                            
                            if report.cv_reasoning:
                                st.markdown("**üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**")
                                st.info(report.cv_reasoning)
                            
                            if report.cv_summary:
                                st.markdown("**üìù –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:**")
                                st.write(report.cv_summary)
                        
                        with col2:
                            if report.key_strengths:
                                st.markdown("**üí™ –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**")
                                for strength in report.key_strengths:
                                    st.success(f"‚úÖ {strength}")
                            
                            if report.concerns:
                                st.markdown("**‚ö†Ô∏è –ó–∞–º–µ—á–∞–Ω–∏—è:**")
                                for concern in report.concerns:
                                    st.warning(f"‚ö†Ô∏è {concern}")
                        
                        if report.interview_questions:
                            st.markdown("**‚ùì –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:**")
                            for i, question in enumerate(report.interview_questions, 1):
                                st.markdown(f"{i}. {question}")
                    
                    tab_idx += 1
                
                # –¢–∞–± –∏–Ω—Ç–µ—Ä–≤—å—é
                if report.interview_scheduled:
                    with tabs[tab_idx]:
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            st.markdown("**üìÖ –°—Ç–∞—Ç—É—Å:** –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
                            if report.interview_date:
                                st.markdown(f"**üïê –î–∞—Ç–∞:** {report.interview_date.strftime('%d.%m.%Y %H:%M')}")
                            if report.interviewer_name:
                                st.markdown(f"**üë§ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä:** {report.interviewer_name}")
                            if report.interview_format:
                                st.markdown(f"**üé• –§–æ—Ä–º–∞—Ç:** {report.interview_format}")
                        
                        with col2:
                            email_status = "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if report.email_sent else "‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                            st.markdown(f"**üìß Email:** {email_status}")
                    
                    tab_idx += 1
                
                # –¢–∞–± –¥–∏–∞–ª–æ–≥–∞
                if report.interview_completed:
                    with tabs[tab_idx]:
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            st.markdown(f"**üìä –û—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é:** {report.interview_score}/10")
                            
                            if report.dialog_summary:
                                st.markdown("**üìù –†–µ–∑—é–º–µ –∏–Ω—Ç–µ—Ä–≤—å—é:**")
                                st.info(report.dialog_summary)
                            
                            # –î–µ—Ç–∞–ª–∏ –¥–∏–∞–ª–æ–≥–∞
                            if report.dialog_details:
                                st.markdown("**üí¨ –î–µ—Ç–∞–ª–∏ –¥–∏–∞–ª–æ–≥–∞:**")
                                for i, detail in enumerate(report.dialog_details, 1):
                                    with st.expander(f"–í–æ–ø—Ä–æ—Å {i}: {detail.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å')[:50]}..."):
                                        st.markdown(f"**‚ùì –í–æ–ø—Ä–æ—Å:** {detail.get('question', '')}")
                                        st.markdown(f"**üí¨ –û—Ç–≤–µ—Ç:** {detail.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
                                        if detail.get('score'):
                                            st.markdown(f"**üìä –û—Ü–µ–Ω–∫–∞:** {detail.get('score')}/10")
                                        if detail.get('comment'):
                                            st.markdown(f"**üí≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {detail.get('comment')}")
                        
                        with col2:
                            st.markdown(f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**")
                            st.metric("–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", report.total_questions)
                            st.metric("–û—Ç–≤–µ—á–µ–Ω–æ", report.answered_questions)
                            
                            if report.total_questions > 0:
                                completion_rate = (report.answered_questions / report.total_questions) * 100
                                st.metric("–ü–æ–ª–Ω–æ—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤", f"{completion_rate:.0f}%")
                    
                    tab_idx += 1
                
                # –¢–∞–± —Ä–µ—à–µ–Ω–∏—è
                if report.final_decision:
                    with tabs[tab_idx]:
                        decision_color = {
                            'hired': 'success',
                            'rejected': 'error',
                            'on_hold': 'warning'
                        }.get(report.final_decision, 'info')
                        
                        decision_emoji = {
                            'hired': '‚úÖ',
                            'rejected': '‚ùå',
                            'on_hold': '‚è∏Ô∏è'
                        }.get(report.final_decision, '‚ùì')
                        
                        decision_text = {
                            'hired': '–ü—Ä–∏–Ω—è—Ç',
                            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω',
                            'on_hold': '–ù–∞ –ø–∞—É–∑–µ'
                        }.get(report.final_decision, report.final_decision)
                        
                        col1, col2 = st.columns([2, 1])
                        
                        with col1:
                            if decision_color == 'success':
                                st.success(f"{decision_emoji} **–†–µ—à–µ–Ω–∏–µ:** {decision_text}")
                            elif decision_color == 'error':
                                st.error(f"{decision_emoji} **–†–µ—à–µ–Ω–∏–µ:** {decision_text}")
                            elif decision_color == 'warning':
                                st.warning(f"{decision_emoji} **–†–µ—à–µ–Ω–∏–µ:** {decision_text}")
                            else:
                                st.info(f"{decision_emoji} **–†–µ—à–µ–Ω–∏–µ:** {decision_text}")
                            
                            if report.decision_reason:
                                st.markdown("**üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**")
                                st.info(report.decision_reason)
                            
                            if report.decided_by:
                                st.markdown(f"**üë§ –ü—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ:** {report.decided_by}")
                            
                            if report.decision_date:
                                st.markdown(f"**üìÖ –î–∞—Ç–∞:** {report.decision_date.strftime('%d.%m.%Y %H:%M')}")
                        
                        with col2:
                            if report.overall_score:
                                st.metric("–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª", f"{report.overall_score}/10")
                            
                            if report.salary_offer and report.final_decision == 'hired':
                                st.metric("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", f"{report.salary_offer:,} ‚ÇΩ")
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.markdown("## üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        contact_col1, contact_col2 = st.columns(2)
        
        with contact_col1:
            if report.email:
                st.markdown(f"**üìß Email:** {report.email}")
            st.markdown(f"**üí¨ –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:** {report.preferred_contact}")
        
        with contact_col2:
            st.markdown(f"**üìÑ –§–∞–π–ª CV:** {report.filename}")
            st.markdown(f"**üîó Request ID:** `{report.request_id}`")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
        st.markdown("---")
        col1, col2, col3 = st.columns([1, 1, 2])
        
        with col1:
            if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç JSON"):
                report_json = {
                    'candidate_info': {
                        'id': report.candidate_id,
                        'name': report.candidate_name,
                        'email': report.email,
                        'contact': report.preferred_contact,
                        'vacancy': report.vacancy_title
                    },
                    'ratings': rating_data,
                    'process_status': status_data,
                    'generated_at': datetime.now().isoformat()
                }
                
                st.download_button(
                    "üíæ –°–∫–∞—á–∞—Ç—å JSON",
                    data=json.dumps(report_json, ensure_ascii=False, indent=2),
                    file_name=f"report_{report.candidate_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
        
        with col2:
            if st.button("üìù –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç"):
                summary_report = f"""
# –û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—É: {report.candidate_name}

**–í–∞–∫–∞–Ω—Å–∏—è:** {report.vacancy_title}  
**ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:** {report.candidate_id}  
**–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:** {rating_data['total_score']}/10 - {rating_data['rating']}

## –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
{status_data['current_stage']} ({status_data['completed_stages']}/{status_data['total_stages']} —ç—Ç–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ)

## –û—Ü–µ–Ω–∫–∏
- –ê–Ω–∞–ª–∏–∑ CV: {report.cv_score}/10 {'‚úÖ' if report.cv_score else '‚ùå'}
- –ò–Ω—Ç–µ—Ä–≤—å—é: {report.interview_score}/10 {'‚úÖ' if report.interview_score else '‚ùå'}
- –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {report.final_decision or '–ù–µ –ø—Ä–∏–Ω—è—Ç–æ'}

**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
                """
                
                st.download_button(
                    "üíæ –°–∫–∞—á–∞—Ç—å MD",
                    data=summary_report,
                    file_name=f"brief_report_{report.candidate_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
    
    def render_no_data_state(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"""
        st.markdown("""
        <div style="text-align: center; padding: 60px 20px; color: #6c757d;">
            <h2>üîç –ù–∞–π—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</h2>
            <p style="font-size: 18px; margin-bottom: 30px;">
                –í–≤–µ–¥–∏—Ç–µ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            </p>
        </div>
        """, unsafe_allow_html=True)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.render_header()
        self.render_sidebar()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if st.session_state.report_data:
            self.render_candidate_report(st.session_state.report_data)
        else:
            self.render_no_data_state()
        
        # –ü–æ–¥–≤–∞–ª
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; color: #6c757d; padding: 20px;">
            <p>üìä HR Analytics Dashboard | Block 4: Final Report Generator</p>
            <p style="font-size: 12px;">Powered by Streamlit & PostgreSQL</p>
        </div>
        """, unsafe_allow_html=True)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = StreamlitReportApp()
    app.run()


if __name__ == "__main__":
    main()
