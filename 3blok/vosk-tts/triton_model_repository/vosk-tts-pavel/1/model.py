"""
Triton Python Backend –¥–ª—è vosk-tts –º–æ–¥–µ–ª–∏ Pavel
"""

import json
import logging
import numpy as np
import subprocess
import tempfile
import os
import soundfile as sf
from pathlib import Path

import triton_python_backend_utils as pb_utils

logger = logging.getLogger(__name__)


class TritonPythonModel:
    """Triton Python –º–æ–¥–µ–ª—å –¥–ª—è vosk-tts Pavel"""
    
    def initialize(self, args):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        
        self.model_config = model_config = json.loads(args['model_config'])
        self.model_name = "vosk-tts-pavel"
        self.voice_path = "russian/pavel"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å vosk-tts
        try:
            result = subprocess.run(
                ["python", "-m", "vosk_tts", "--help"], 
                capture_output=True, text=True, timeout=10
            )
            if result.returncode != 0:
                raise Exception("vosk-tts CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
            logger.info(f"‚úÖ {self.model_name} –º–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {self.model_name}: {e}")
            raise
    
    def execute(self, requests):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
        
        responses = []
        
        for request in requests:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                text_tensor = pb_utils.get_input_tensor_by_name(request, "text")
                text = text_tensor.as_numpy()[0].decode('utf-8')
                
                # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                speed = 1.0
                pitch = 1.0
                sample_rate = 22050
                
                speed_tensor = pb_utils.get_input_tensor_by_name(request, "speed")
                if speed_tensor is not None:
                    speed = float(speed_tensor.as_numpy()[0])
                
                pitch_tensor = pb_utils.get_input_tensor_by_name(request, "pitch") 
                if pitch_tensor is not None:
                    pitch = float(pitch_tensor.as_numpy()[0])
                
                sample_rate_tensor = pb_utils.get_input_tensor_by_name(request, "sample_rate")
                if sample_rate_tensor is not None:
                    sample_rate = int(sample_rate_tensor.as_numpy()[0])
                
                # –°–∏–Ω—Ç–µ–∑ –∞—É–¥–∏–æ
                audio_data = self._synthesize_audio(text, speed, pitch, sample_rate)
                
                if audio_data is None:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–µ–Ω–∑–æ—Ä–æ–≤
                audio_tensor = pb_utils.Tensor("audio", audio_data.astype(np.float32))
                sample_rate_tensor = pb_utils.Tensor("sample_rate_out", np.array([sample_rate], dtype=np.float32))
                
                response = pb_utils.InferenceResponse(
                    output_tensors=[audio_tensor, sample_rate_tensor]
                )
                
                responses.append(response)
                
                logger.debug(f"TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {len(audio_data)} —Å—ç–º–ø–ª–æ–≤")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ TTS —Å–∏–Ω—Ç–µ–∑–∞: {e}")
                
                error_response = pb_utils.InferenceResponse(
                    error=pb_utils.TritonError(f"TTS Error: {str(e)}")
                )
                responses.append(error_response)
        
        return responses
    
    def _synthesize_audio(self, text: str, speed: float, pitch: float, sample_rate: int) -> np.ndarray:
        """–°–∏–Ω—Ç–µ–∑ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ vosk-tts CLI"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as temp_file:
                temp_path = temp_file.name
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è vosk-tts
            cmd = [
                "python", "-m", "vosk_tts",
                "--text", text,
                "--voice", self.voice_path,
                "--output", temp_path,
                "--sample-rate", str(sample_rate)
            ]
            
            if speed != 1.0:
                cmd.extend(["--speed", str(speed)])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑
            result = subprocess.run(
                cmd, 
                capture_output=True, text=True, timeout=30
            )
            
            if result.returncode != 0:
                logger.error(f"vosk-tts error: {result.stderr}")
                return None
            
            # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if os.path.exists(temp_path):
                audio_data, _ = sf.read(temp_path)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_path)
                
                return audio_data
            else:
                logger.error("–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return None
                
        except subprocess.TimeoutExpired:
            logger.error("–¢–∞–π–º–∞—É—Ç TTS —Å–∏–Ω—Ç–µ–∑–∞")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ TTS: {e}")
            return None
    
    def finalize(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        logger.info(f"üõë {self.model_name} –º–æ–¥–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
