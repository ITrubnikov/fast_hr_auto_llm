"""
FastAPI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Vosk-TTS —Å–µ—Ä–≤–∏—Å–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π
"""

import asyncio
import logging
import time
from typing import List, Optional, Dict, Any
from pathlib import Path
import tempfile
import uuid

from fastapi import FastAPI, HTTPException, BackgroundTasks, Query, Form, UploadFile, File
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

from .config import ServiceConfig, TTSConfig
from .tts import VoskTTSEngine

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class SynthesisRequest(BaseModel):
    text: str = Field(..., description="–¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞", max_length=1000)
    voice: Optional[str] = Field(default=None, description="–ò–º—è –≥–æ–ª–æ—Å–∞")
    format: Optional[str] = Field(default="wav", description="–§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ")

class SynthesisResponse(BaseModel):
    success: bool
    message: str
    audio_url: Optional[str] = None
    file_id: Optional[str] = None
    duration: Optional[float] = None
    voice_used: Optional[str] = None
    processing_time: Optional[float] = None

class VoiceInfo(BaseModel):
    name: str
    gender: str
    language: str
    sample_rate: int
    description: str
    ready: bool
    engine: Optional[str] = None

class HealthResponse(BaseModel):
    status: str
    message: str
    details: Dict[str, Any]
    timestamp: float

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
tts_engine: Optional[VoskTTSEngine] = None
service_config: Optional[ServiceConfig] = None

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="Vosk-TTS API",
    description="Text-to-Speech —Å–µ—Ä–≤–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ Vosk TTS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π",
    version="0.9.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global tts_engine, service_config
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Vosk-TTS API —Å–µ—Ä–≤–∏—Å–∞ —Å –æ—Ç–ª–∞–¥–∫–æ–π...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        service_config = ServiceConfig()
        
        # –°–æ–∑–¥–∞–µ–º TTS –¥–≤–∏–∂–æ–∫
        tts_engine = VoskTTSEngine(service_config.tts)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–≤–∏–∂–æ–∫ (–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Vosk)
        success = await tts_engine.initialize()
        
        if not success:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TTS –¥–≤–∏–∂–æ–∫")
            raise Exception("TTS initialization failed")
        
        logger.info("‚úÖ Vosk-TTS API —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –æ—Ç–ª–∞–¥–∫–æ–π!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
        voices = tts_engine.get_available_voices()
        logger.info(f"üì¢ –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {voices}")
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    global tts_engine
    
    if tts_engine:
        await tts_engine.cleanup()
        logger.info("üõë Vosk-TTS API —Å–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.get("/", response_model=Dict[str, Any])
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "name": "Vosk-TTS API",
        "version": "0.9.0",
        "description": "Text-to-Speech —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Vosk TTS —Å –æ—Ç–ª–∞–¥–∫–æ–π",
        "endpoints": {
            "synthesis": "/synthesize",
            "voices": "/voices",
            "health": "/health",
            "docs": "/docs"
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    global tts_engine
    
    if not tts_engine:
        raise HTTPException(status_code=503, detail="TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        health_info = tts_engine.health_check()
        
        status = "healthy" if health_info.get("initialized", False) else "unhealthy"
        
        response_data = {
            "status": status,
            "message": "–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" if status == "healthy" else "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã",
            "details": health_info,
            "timestamp": time.time()
        }
        
        return JSONResponse(
            content=response_data,
            media_type="application/json; charset=utf-8"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/voices", response_model=Dict[str, VoiceInfo])
async def get_voices():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
    global tts_engine
    
    if not tts_engine:
        raise HTTPException(status_code=503, detail="TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        voices_list = tts_engine.get_available_voices()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ –≤ Pydantic –º–æ–¥–µ–ª–∏
        response = {}
        for voice_name in voices_list:
            response[voice_name] = VoiceInfo(
                name=voice_name,
                gender="female" if voice_name in ["irina", "elena", "natasha"] else "male",
                language="ru",
                sample_rate=22050,
                description=f"Vosk TTS –≥–æ–ª–æ—Å: {voice_name}",
                ready=True,
                engine="Vosk TTS (Local)"
            )
        
        return response
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/synthesize", response_model=SynthesisResponse)
async def synthesize_text(request: SynthesisRequest):
    """–°–∏–Ω—Ç–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å"""
    global tts_engine
    
    if not tts_engine:
        raise HTTPException(status_code=503, detail="TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    start_time = time.time()
    
    try:
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        logger.info(f"üî§ RAW —Ç–µ–∫—Å—Ç: {repr(request.text[:50])}")
        logger.info(f"üî§ UTF-8 bytes: {request.text.encode('utf-8')[:100]}")
        logger.info(f"üî§ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(request.text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        safe_text = request.text[:50].encode('ascii', 'replace').decode('ascii')
        logger.info(f"üé§ –°–∏–Ω—Ç–µ–∑ —Ç–µ–∫—Å—Ç–∞: {safe_text}...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())
        
        # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        audio_path = await tts_engine.synthesize_text(
            text=request.text,
            voice=request.voice
        )
        
        if audio_path is None:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
        
        processing_time = time.time() - start_time
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏–æ —Ñ–∞–π–ª–µ
        file_size = audio_path.stat().st_size
        duration = None  # TODO: –≤—ã—á–∏—Å–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å file_id
        new_path = audio_path.parent / f"{file_id}.wav"
        audio_path.rename(new_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        audio_url = f"/audio/{file_id}.wav"
        
        logger.info(f"‚úÖ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        return SynthesisResponse(
            success=True,
            message="–°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ",
            audio_url=audio_url,
            file_id=file_id,
            duration=duration,
            voice_used=request.voice or service_config.tts.default_voice,
            processing_time=processing_time
        )
        
    except Exception as e:
        processing_time = time.time() - start_time
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
        
        return SynthesisResponse(
            success=False,
            message=f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {str(e)}",
            processing_time=processing_time
        )

@app.post("/synthesize/form", response_model=SynthesisResponse)
async def synthesize_text_form(
    text: str = Form(..., description="–¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞"),
    voice: Optional[str] = Form(default=None, description="–ò–º—è –≥–æ–ª–æ—Å–∞")
):
    """–°–∏–Ω—Ç–µ–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É"""
    request = SynthesisRequest(
        text=text,
        voice=voice
    )
    
    return await synthesize_text(request)

@app.get("/audio/{file_id}")
async def get_audio_file(file_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ ID"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å file_id
    if not file_id.replace("-", "").replace(".", "").isalnum():
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ñ–∞–π–ª–∞")
    
    audio_path = Path(service_config.tts.output_dir) / file_id
    
    if not audio_path.exists():
        raise HTTPException(status_code=404, detail="–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return FileResponse(
        path=str(audio_path),
        media_type="audio/wav",
        filename=file_id,
        headers={"Content-Disposition": f"attachment; filename={file_id}"}
    )

@app.delete("/audio/{file_id}")
async def delete_audio_file(file_id: str):
    """–£–¥–∞–ª–∏—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å file_id
    if not file_id.replace("-", "").replace(".", "").isalnum():
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ñ–∞–π–ª–∞")
    
    audio_path = Path(service_config.tts.output_dir) / file_id
    
    if not audio_path.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    try:
        audio_path.unlink()
        return {"success": True, "message": "–§–∞–π–ª —É–¥–∞–ª–µ–Ω"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")

@app.post("/cache/clear")
async def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ TTS"""
    global tts_engine
    
    if not tts_engine:
        raise HTTPException(status_code=503, detail="TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    tts_engine.clear_cache()
    return {"success": True, "message": "–ö–µ—à –æ—á–∏—â–µ–Ω"}

@app.get("/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞"""
    global tts_engine, service_config
    
    if not tts_engine:
        raise HTTPException(status_code=503, detail="TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        health_info = tts_engine.health_check()
        voices_list = tts_engine.get_available_voices()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ output –ø–∞–ø–∫–µ
        output_dir = Path(service_config.tts.output_dir)
        audio_files_count = len(list(output_dir.glob("*.wav"))) if output_dir.exists() else 0
        
        return {
            "service": {
                "name": "Vosk-TTS API",
                "version": "0.9.0",
                "uptime": time.time()  # TODO: —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            },
            "tts_engine": health_info,
            "voices": {
                "total": len(voices_list),
                "ready": len(voices_list),  # –í—Å–µ –≥–æ–ª–æ—Å–∞ Vosk —Å—á–∏—Ç–∞—é—Ç—Å—è –≥–æ—Ç–æ–≤—ã–º–∏
                "available": voices_list
            },
            "files": {
                "audio_files": audio_files_count,
                "output_dir": str(output_dir)
            }
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    config = ServiceConfig()
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Vosk-TTS API –Ω–∞ {config.api.host}:{config.api.port}")
    print(f"üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://{config.api.host}:{config.api.port}/docs")
    
    uvicorn.run(
        "src.vosk_tts.api:app",
        host=config.api.host,
        port=config.api.port,
        workers=config.api.workers,
        log_level=config.log_level.lower(),
        reload=False
    )
