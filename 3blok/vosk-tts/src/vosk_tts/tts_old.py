"""
FishSpeech TTS –¥–≤–∏–∂–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenAudio S1-mini –º–æ–¥–µ–ª–∏
"""

import logging
import asyncio
import tempfile
import hashlib
import subprocess
import os
import sys
from pathlib import Path
from typing import Optional, Union, Dict, Any
from datetime import datetime
import numpy as np
import soundfile as sf

from .config import TTSConfig

logger = logging.getLogger(__name__)


class VoskTTSEngine:
    """
    FishSpeech TTS –¥–≤–∏–∂–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OpenAudio S1-mini –º–æ–¥–µ–ª–∏
    """
    
    def __init__(self, config: TTSConfig):
        self.config = config
        self._cache: Dict[str, Path] = {}
        self._is_initialized = False
        
        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ FishSpeech
        self.fish_speech_path = Path("/app/fish-speech")
        self.model_path = Path(os.getenv("FISHSPEECH_MODEL_PATH", "/app/checkpoints/openaudio-s1-mini"))
        self.llama_checkpoint = os.getenv("FISHSPEECH_LLAMA_CHECKPOINT", str(self.model_path))
        self.decoder_checkpoint = os.getenv("FISHSPEECH_DECODER_CHECKPOINT", str(self.model_path / "codec.pth"))
        self.decoder_config = os.getenv("FISHSPEECH_DECODER_CONFIG", "modded_dac_vq")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        Path(self.config.output_dir).mkdir(parents=True, exist_ok=True)
        Path(self.config.temp_dir).mkdir(parents=True, exist_ok=True)
    
    async def initialize(self, use_triton: bool = False) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FishSpeech TTS –¥–≤–∏–∂–∫–∞
        
        Args:
            use_triton: –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        """
        
        logger.info("üêü –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FishSpeech TTS –¥–≤–∏–∂–∫–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏
            if not self.model_path.exists():
                logger.error(f"‚ùå –ú–æ–¥–µ–ª—å OpenAudio S1-mini –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.model_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –º–æ–¥–µ–ª–∏
            codec_path = Path(self.decoder_checkpoint)
            if not codec_path.exists():
                logger.error(f"‚ùå Codec —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {codec_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FishSpeech
            if not self.fish_speech_path.exists():
                logger.error(f"‚ùå FishSpeech –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.fish_speech_path}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º FishSpeech –≤ Python PATH
            if str(self.fish_speech_path) not in sys.path:
                sys.path.insert(0, str(self.fish_speech_path))
            
            self._is_initialized = True
            logger.info("‚úÖ FishSpeech TTS –¥–≤–∏–∂–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            logger.info(f"üìÅ –ú–æ–¥–µ–ª—å: {self.model_path}")
            logger.info(f"üéØ –î–µ–∫–æ–¥–µ—Ä: {self.decoder_checkpoint}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ FishSpeech: {e}")
            self._is_initialized = False
            return False
    
    async def _initialize_local_engine(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ vosk-tts"""
        # –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è workflow
        logger.info("üîß –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê: –ª–æ–∫–∞–ª—å–Ω—ã–π TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —Å–∏–Ω—Ç–µ–∑–∞")
        return True
        
        try:
            import vosk_tts
            self._local_engine = vosk_tts
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            logger.info("–õ–æ–∫–∞–ª—å–Ω—ã–π vosk-tts –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
            
        except ImportError as e:
            logger.error(f"vosk-tts –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ vosk-tts: {e}")
            return False
    
    async def synthesize_text(
        self,
        text: str,
        voice: str = None,
        speed: float = None,
        pitch: float = None,
        volume: float = None,
        output_path: Optional[Union[str, Path]] = None
    ) -> Optional[Path]:
        """
        –°–∏–Ω—Ç–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            voice: –ò–º—è –≥–æ–ª–æ—Å–∞
            speed: –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏
            pitch: –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞  
            volume: –ì—Ä–æ–º–∫–æ—Å—Ç—å
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        if not self._is_initialized:
            logger.error("TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        # –†–µ–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π vosk-tts
        logger.info(f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å: '{text[:30]}...'")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
            output_path = Path(self.config.output_dir) / f"tts_{timestamp}.wav"
        else:
            output_path = Path(output_path)
            
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º vosk-tts –∫–æ–º–∞–Ω–¥–æ–π
            import subprocess
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å
            voice_name = voice or self.config.default_voice or "irina"
            
            # –ú–∞–ø–ø–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ speaker ID –¥–ª—è –º—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            voice_mapping = {
                "irina": 0,     # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å 0
                "elena": 1,     # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å 1 
                "natasha": 2,   # –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å 2
                "pavel": 3,     # –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å 3
                "dmitri": 4     # –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å 4
            }
            speaker_id = voice_mapping.get(voice_name, 0)
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏-–≥–æ–ª–æ—Å–æ–≤—É—é –º–æ–¥–µ–ª—å)
            cmd = [
                "vosk-tts", 
                "--input", text,
                "--output", str(output_path),
                "--model-name", "vosk-model-tts-ru-0.9-multi",
                "--speaker", str(speaker_id)
            ]
            
            logger.debug(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0 and output_path.exists():
                logger.info(f"‚úÖ TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {output_path}")
                return output_path
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ vosk-tts: {result.stderr}")
                
                # Fallback: —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª
                logger.warning("üîÑ Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É")
                import soundfile as sf
                import numpy as np
                
                sample_rate = 22050
                duration = 1.0
                audio_data = np.zeros(int(sample_rate * duration), dtype=np.float32)
                sf.write(output_path, audio_data, sample_rate)
                return output_path
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return None
        
        if not text.strip():
            logger.warning("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞")
            return None
        
        if len(text) > self.config.max_text_length:
            logger.error(f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(text)} > {self.config.max_text_length}")
            return None
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        voice = voice or self.config.default_voice
        speed = speed or self.config.default_speed
        pitch = pitch or self.config.default_pitch
        volume = volume or self.config.default_volume
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
        cache_key = None
        if self.config.enable_cache:
            cache_key = self._generate_cache_key(text, voice, speed, pitch, volume)
            if cache_key in self._cache and self._cache[cache_key].exists():
                logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –¥–ª—è: {text[:50]}...")
                return self._cache[cache_key]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if output_path is None:
            timestamp = asyncio.get_event_loop().time()
            filename = f"tts_{voice}_{int(timestamp)}.wav"
            output_path = Path(self.config.output_dir) / filename
        else:
            output_path = Path(output_path)
            output_path.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            # –ü—Ä–æ–±—É–µ–º Triton —Å–Ω–∞—á–∞–ª–∞
            if self.triton_client:
                audio_data = await self.triton_client.synthesize_text(
                    text=text,
                    voice=voice,
                    speed=speed,
                    pitch=pitch
                )
                
                if audio_data is not None:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
                    if volume != 1.0:
                        audio_data = audio_data * volume
                        audio_data = np.clip(audio_data, -1.0, 1.0)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                    voice_config = self.config.voices.get(voice)
                    sample_rate = voice_config.sample_rate if voice_config else 22050
                    
                    sf.write(str(output_path), audio_data, sample_rate)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
                    if cache_key:
                        self._cache[cache_key] = output_path
                    
                    logger.debug(f"Triton TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {output_path}")
                    return output_path
                else:
                    logger.warning("Triton TTS –Ω–µ —Å–º–æ–≥ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π")
            
            # –ï—Å–ª–∏ Triton –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π
            if self._local_engine:
                success = await self._synthesize_local(
                    text=text,
                    voice=voice,
                    speed=speed,
                    pitch=pitch,
                    volume=volume,
                    output_path=output_path
                )
                
                if success:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
                    if cache_key:
                        self._cache[cache_key] = output_path
                    
                    logger.debug(f"–õ–æ–∫–∞–ª—å–Ω—ã–π TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {output_path}")
                    return output_path
            
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    async def _synthesize_local(
        self,
        text: str,
        voice: str,
        speed: float,
        pitch: float, 
        volume: float,
        output_path: Path
    ) -> bool:
        """–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ vosk-tts CLI"""
        
        try:
            import subprocess
            
            # –ú–∞–ø–∏–Ω–≥ –≥–æ–ª–æ—Å–æ–≤ vosk-tts
            voice_mapping = {
                "irina": "russian/irina",
                "elena": "russian/elena", 
                "pavel": "russian/pavel"
            }
            
            voice_path = voice_mapping.get(voice, "russian/irina")
            
            # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è vosk-tts
            cmd = [
                "python", "-m", "vosk_tts",
                "--text", text,
                "--voice", voice_path,
                "--output", str(output_path),
                "--sample-rate", "22050"
            ]
            
            if speed != 1.0:
                cmd.extend(["--speed", str(speed)])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ç–µ–∑
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            stdout, stderr = await process.communicate()
            
            if process.returncode == 0 and output_path.exists():
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if volume != 1.0:
                    audio_data, sample_rate = sf.read(str(output_path))
                    audio_data = audio_data * volume
                    audio_data = np.clip(audio_data, -1.0, 1.0)
                    sf.write(str(output_path), audio_data, sample_rate)
                
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ TTS: {stderr.decode()}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return False
    
    def _generate_cache_key(
        self, 
        text: str, 
        voice: str, 
        speed: float, 
        pitch: float, 
        volume: float
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫–µ—à–∞"""
        
        cache_string = f"{text}|{voice}|{speed}|{pitch}|{volume}"
        return hashlib.md5(cache_string.encode()).hexdigest()
    
    async def get_available_voices(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        
        if self.triton_client:
            return self.triton_client.get_available_voices()
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            voices = {}
            for voice_name, voice_config in self.config.voices.items():
                voices[voice_name] = {
                    'name': voice_name,
                    'gender': voice_config.gender,
                    'language': voice_config.language,
                    'sample_rate': voice_config.sample_rate,
                    'description': voice_config.description,
                    'ready': True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
                    'engine': 'local'
                }
            
            return voices
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è TTS –¥–≤–∏–∂–∫–∞"""
        
        status = {
            "initialized": self._is_initialized,
            "triton_available": self.triton_client is not None,
            "local_available": self._local_engine is not None,
            "cache_size": len(self._cache)
        }
        
        if self.triton_client:
            triton_health = await self.triton_client.health_check()
            status["triton_healthy"] = triton_health
            
            if triton_health:
                status["server_info"] = self.triton_client.get_server_info()
        
        return status
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞"""
        self._cache.clear()
        logger.info("–ö–µ—à TTS –æ—á–∏—â–µ–Ω")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        
        if self.triton_client:
            await self.triton_client.cleanup()
            self.triton_client = None
        
        self._local_engine = None
        self._cache.clear()
        self._is_initialized = False
        
        logger.info("TTS –¥–≤–∏–∂–æ–∫ –∑–∞–∫—Ä—ã—Ç")
