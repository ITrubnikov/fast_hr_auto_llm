"""
Vosk TTS –¥–≤–∏–∂–æ–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π
"""

import logging
import asyncio
import tempfile
from pathlib import Path
from typing import Optional, Union, Dict, Any
import subprocess
import os
import shutil
from datetime import datetime
import numpy as np
import soundfile as sf

# Vosk TTS Python API - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏  
from vosk_tts import Model, Synth

from .config import TTSConfig

logger = logging.getLogger(__name__)


class VoskTTSEngine:
    """
    Vosk TTS –¥–≤–∏–∂–æ–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
    """
    
    def __init__(self, config: TTSConfig):
        self.config = config
        self._cache: Dict[str, Path] = {}
        self._is_initialized = False
        self._available_voices = []
        self._model = None
        self._synth = None
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ Vosk TTS (—Ä—É—Å—Å–∫–∏–µ)
        self._default_voices = [
            {"name": "irina", "lang": "ru", "speaker_id": 0, "description": "–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å"},
            {"name": "elena", "lang": "ru", "speaker_id": 1, "description": "–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å"},
            {"name": "natasha", "lang": "ru", "speaker_id": 2, "description": "–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å"},
            {"name": "pavel", "lang": "ru", "speaker_id": 3, "description": "–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å"},
            {"name": "dmitri", "lang": "ru", "speaker_id": 4, "description": "–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å"}
        ]
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        Path(self.config.output_dir).mkdir(parents=True, exist_ok=True)
        Path(self.config.temp_dir).mkdir(parents=True, exist_ok=True)
    
    async def initialize(self, use_triton: bool = False) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vosk TTS –¥–≤–∏–∂–∫–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
        
        Args:
            use_triton: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Vosk TTS
            
        Returns:
            True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Vosk TTS –¥–≤–∏–∂–æ–∫...")

            # –†–µ–∂–∏–º –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CLI (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –≤ Docker)
            cli_only = os.environ.get("TTS_CLI_ONLY", "0") == "1"
            if cli_only:
                self._available_voices = [v["name"] for v in self._default_voices]
                self._is_initialized = True
                logger.warning("‚öôÔ∏è  –í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º CLI-only (TTS_CLI_ONLY=1): –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Vosk TTS –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return True
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Vosk TTS
            try:
                model_name = "vosk-model-tts-ru-0.9-multi"  
                logger.info(f"üîß –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_name}")
                self._model = Model(model_name=model_name)
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {type(self._model)}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä
                self._synth = Synth(self._model)
                logger.info(f"‚úÖ –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {type(self._synth)}")
                
            except Exception as model_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å {model_name}: {model_error}")
                return False
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            self._available_voices = [v["name"] for v in self._default_voices]
            logger.info(f"‚úÖ Vosk TTS —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞: {self._available_voices}")
            self._is_initialized = True
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk TTS: {e}")
            return False
    
    
    async def _get_available_voices(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self._available_voices if self._available_voices else [v["name"] for v in self._default_voices]
    
    async def synthesize_text(
        self, 
        text: str, 
        voice: str = "irina",
        output_path: Optional[Union[str, Path]] = None
    ) -> Optional[Path]:
        """
        –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å –∏—Å–ø–æ–ª—å–∑—É—è Vosk TTS —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞
            voice: –ì–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (irina, elena, natasha, pavel, dmitri)
            output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self._is_initialized:
            logger.error("‚ùå TTS –¥–≤–∏–∂–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return None
        
        if not text or not text.strip():
            logger.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞")
            return None
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ TTS
        logger.info(f"üî§ TTS RAW —Ç–µ–∫—Å—Ç: {repr(text[:50])}")
        logger.info(f"üî§ TTS UTF-8 bytes: {text.encode('utf-8')[:100]}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
        safe_text = text[:50].encode('ascii', 'replace').decode('ascii')
        logger.info(f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ä–µ—á—å Vosk TTS: '{safe_text}...' –≥–æ–ª–æ—Å: {voice}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if output_path is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S_%f")
            output_path = Path(self.config.output_dir) / f"vosk_tts_{timestamp}.wav"
        else:
            output_path = Path(output_path)
            
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        try:
            # 1) –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ CLI (–Ω–∞–¥–µ–∂–Ω—ã–π –ø—É—Ç—å –∫–∞–∫ –≤ Triton)
            success = await self._synthesize_with_cli(text, voice, output_path)

            # 2) –ï—Å–ª–∏ CLI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º Python API (–≤—Ç–æ—Ä–æ–π —à–∞–Ω—Å)
            if not success:
                success = await self._synthesize_vosk_debug(text, voice, output_path)
            
            if success:
                logger.info(f"‚úÖ Vosk TTS —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω: {output_path}")
                return output_path
            else:
                logger.error("‚ùå Vosk TTS —Å–∏–Ω—Ç–µ–∑ –Ω–µ —É–¥–∞–ª—Å—è")
                
                # Fallback: —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª —Å —Ç–∏—à–∏–Ω–æ–π
                logger.warning("üîÑ Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É")
                sample_rate = 22050
                duration = len(text.split()) * 0.5  # ~0.5 —Å–µ–∫ –Ω–∞ —Å–ª–æ–≤–æ
                duration = max(1.0, min(duration, 10.0))  # –æ—Ç 1 –¥–æ 10 —Å–µ–∫
                
                audio_data = np.zeros(int(sample_rate * duration), dtype=np.float32)
                sf.write(output_path, audio_data, sample_rate)
                return output_path
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ Vosk TTS: {e}")
            
            # Emergency fallback
            try:
                sample_rate = 22050
                duration = 1.0
                audio_data = np.zeros(int(sample_rate * duration), dtype=np.float32)
                sf.write(output_path, audio_data, sample_rate)
                return output_path
            except:
                return None
    
    async def _synthesize_with_cli(self, text: str, voice: str, output_path: Path) -> bool:
        """
        –°–∏–Ω—Ç–µ–∑ —á–µ—Ä–µ–∑ CLI `python -m vosk_tts` (–∫–∞–∫ –≤ Triton Python backend)
        –ù–∞–¥–µ–∂–Ω–µ–µ —Ç–µ–∫—É—â–µ–≥–æ Python API –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–∞.
        """
        try:
            text_utf8 = text.encode('utf-8').decode('utf-8') if isinstance(text, str) else str(text)

            # –ú–∞–ø–ø–∏–Ω–≥ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –∏–º–µ–Ω –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ –ø—É—Ç–∏ CLI
            voice_map = {
                "irina": "russian/irina",
                "elena": "russian/elena",
                "pavel": "russian/pavel",
                # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –º–∞–ø–ø–∏–º –ø—Ä–æ—á–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                "natasha": "russian/elena",
                "dmitri": "russian/pavel",
            }
            voice_path = voice_map.get(voice or "irina", "russian/irina")

            cmd = [
                "python", "-m", "vosk_tts",
                "--text", text_utf8,
                "--voice", voice_path,
                "--output", str(output_path),
                "--sample-rate", "22050",
            ]

            logger.info(f"üß™ CLI —Å–∏–Ω—Ç–µ–∑: voice={voice_path}, out={output_path}")
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            if result.returncode != 0:
                logger.warning(f"‚ùå vosk_tts CLI error: {result.stderr}")
                return False

            if output_path.exists() and output_path.stat().st_size > 0:
                logger.info(f"‚úÖ CLI —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª: {output_path.stat().st_size} –±–∞–π—Ç")
                return True
            else:
                logger.error(f"‚ùå CLI –Ω–µ —Å–æ–∑–¥–∞–ª —Ñ–∞–π–ª –∏–ª–∏ –æ–Ω –ø—É—Å—Ç: {output_path}")
                return False
        except subprocess.TimeoutExpired:
            logger.error("‚è≥ –¢–∞–π–º–∞—É—Ç CLI —Å–∏–Ω—Ç–µ–∑–∞")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ CLI —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return False

    async def _synthesize_vosk_debug(self, text: str, voice: str, output_path: Path) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Å –ø–æ–º–æ—â—å—é Vosk TTS
        """
        try:
            # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
            text_utf8 = text.encode('utf-8').decode('utf-8') if isinstance(text, str) else str(text)
            logger.info(f"üé§ –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º: '{text_utf8[:50]}...' –≥–æ–ª–æ—Å={voice}")
            logger.info(f"üî§ –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: {len(text_utf8)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if self._model is None or self._synth is None:
                logger.error("‚ùå –ú–æ–¥–µ–ª—å –∏–ª–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return False
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º speaker_id –ø–æ –∏–º–µ–Ω–∏ –≥–æ–ª–æ—Å–∞
            speaker_id = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é irina
            for voice_info in self._default_voices:
                if voice_info["name"] == voice:
                    speaker_id = voice_info["speaker_id"]
                    break
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ API
            logger.info(f"üß™ –ü–æ–ø—ã—Ç–∫–∞ 1: synth(text, output_path, speaker_id) - –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
            try:
                self._synth.synth(text_utf8, str(output_path), speaker_id)
                logger.info("‚úÖ –£—Å–ø–µ—Ö: –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
            except Exception as e1:
                logger.warning(f"‚ùå –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç: {e1}")
                
                logger.info(f"üß™ –ü–æ–ø—ã—Ç–∫–∞ 2: synth(text, speaker_id) - –±–µ–∑ output_path")
                try:
                    result = self._synth.synth(text_utf8, speaker_id)
                    logger.info(f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç synth: {type(result)}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {result[:100] if hasattr(result, '__len__') else result}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
                    if hasattr(result, '__len__') and len(result) > 0:
                        import soundfile as sf
                        sf.write(str(output_path), result, 22050)
                        logger.info("‚úÖ –£—Å–ø–µ—Ö: –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º")
                    else:
                        raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                        
                except Exception as e2:
                    logger.warning(f"‚ùå –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e2}")
                    raise e2
            logger.info(f"üéµ –°–∏–Ω—Ç–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {output_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –ø—É—Å—Ç–æ–π
            if output_path.exists() and output_path.stat().st_size > 0:
                logger.info(f"‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {output_path.stat().st_size} –±–∞–π—Ç")
                return True
            else:
                logger.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π: {output_path}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {e}")
            return False
    
    
    
    def get_available_voices(self) -> list:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≥–æ–ª–æ—Å–æ–≤
        """
        return self._available_voices if self._available_voices else ["irina", "elena", "natasha", "pavel", "dmitri"]
    
    def get_config_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        return {
            "engine": "Vosk TTS (Local)",
            "version": "0.9-multi",
            "model_loaded": bool(self._model),
            "synth_ready": bool(self._synth),
            "initialized": self._is_initialized,
            "available_voices": self.get_available_voices(),
            "output_dir": str(self.config.output_dir),
            "temp_dir": str(self.config.temp_dir),
            "cache_size": len(self._cache)
        }
    
    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è TTS –¥–≤–∏–∂–∫–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∑–¥–æ—Ä–æ–≤—å—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            model_ok = bool(self._model)
            synth_ok = bool(self._synth)
            init_ok = self._is_initialized
            
            status = "healthy" if (model_ok and synth_ok and init_ok) else "unhealthy"
            
            return {
                "status": status,
                "engine": "Vosk TTS (Local)",
                "version": "0.9-multi",
                "model_loaded": model_ok,
                "synth_ready": synth_ok,
                "initialized": init_ok,
                "available_voices": self.get_available_voices(),
                "cache_size": len(self._cache)
            }
        except Exception as e:
            return {
                "status": "error",
                "engine": "Vosk TTS (Local)",
                "error": str(e)
            }
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –∫–µ—à
            self._cache.clear()
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã Vosk TTS
            if self._synth:
                self._synth = None
                logger.info("üßπ –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä Vosk TTS –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")
                
            if self._model:
                self._model = None
                logger.info("üßπ –ú–æ–¥–µ–ª—å Vosk TTS –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Vosk TTS
            temp_dir = Path(self.config.temp_dir)
            if temp_dir.exists():
                for temp_file in temp_dir.glob("vosk_tts_*"):
                    try:
                        temp_file.unlink()
                        logger.debug(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_file}")
                    except:
                        pass
            
            self._is_initialized = False
            logger.info("üßπ Vosk TTS —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ Vosk TTS: {e}")