
import sys
import os
import time
import numpy as np
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–µ–º—É –º–æ–¥—É–ª—é
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def create_test_audio(duration: float = 2.0, sample_rate: int = 16000, frequency: float = 440.0) -> np.ndarray:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª (—Å–∏–Ω—É—Å–æ–∏–¥–∞)
    
    Args:
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        frequency: –ß–∞—Å—Ç–æ—Ç–∞ —Ç–æ–Ω–∞ –≤ –ì–µ—Ä—Ü–∞—Ö
    
    Returns:
        –ê—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª –∫–∞–∫ numpy array
    """
    t = np.linspace(0, duration, int(sample_rate * duration), endpoint=False)
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    audio = np.sin(2 * np.pi * frequency * t)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–≥–∏–±–∞—é—â—É—é –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–≤—É—á–∞–Ω–∏—è
    fade_samples = int(0.1 * sample_rate)  # 0.1 —Å–µ–∫—É–Ω–¥—ã –∑–∞—Ç—É—Ö–∞–Ω–∏—è
    fade_in = np.linspace(0, 1, fade_samples)
    fade_out = np.linspace(1, 0, fade_samples)
    
    audio[:fade_samples] *= fade_in
    audio[-fade_samples:] *= fade_out
    
    return audio.astype(np.float32)

def create_noisy_audio(duration: float = 3.0, sample_rate: int = 16000) -> np.ndarray:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ —Å —Ä–µ—á—å—é –∏ –ø–∞—É–∑–∞–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è)
    
    Args:
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        sample_rate: –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    
    Returns:
        –ê—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª —Å "—Ä–µ—á—å—é" –∏ –ø–∞—É–∑–∞–º–∏
    """
    samples = int(sample_rate * duration)
    audio = np.zeros(samples, dtype=np.float32)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ "—Å–ª–æ–≤" (—Ç–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ä–∞–∑–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã)
    word_segments = [
        (0.2, 0.8, 300),   # "—Å–ª–æ–≤–æ" 1: 300 Hz
        (1.0, 1.4, 450),   # "—Å–ª–æ–≤–æ" 2: 450 Hz  
        (1.8, 2.5, 350),   # "—Å–ª–æ–≤–æ" 3: 350 Hz
    ]
    
    for start, end, freq in word_segments:
        start_idx = int(start * sample_rate)
        end_idx = int(end * sample_rate)
        
        if end_idx > samples:
            end_idx = samples
            
        segment_duration = (end_idx - start_idx) / sample_rate
        t = np.linspace(0, segment_duration, end_idx - start_idx, endpoint=False)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        tone = np.sin(2 * np.pi * freq * t) * 0.7
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —à—É–º–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        noise = np.random.normal(0, 0.1, len(tone))
        segment = tone + noise
        
        audio[start_idx:end_idx] = segment.astype(np.float32)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–π —à—É–º
    background_noise = np.random.normal(0, 0.05, samples)
    audio += background_noise.astype(np.float32)
    
    return audio

def test_triton_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Triton —Å–µ—Ä–≤–µ—Ä—É"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Triton —Å–µ—Ä–≤–µ—Ä—É...")
    
    try:
        import requests
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        response = requests.get("http://localhost:8000/v2/health/ready", timeout=5)
        if response.status_code != 200:
            print(f"‚ùå Triton —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
            return False
            
        print("‚úÖ Triton —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω—É–∂–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models_to_check = ["gigaam_preprocessor", "gigaam-v2-ctc", "pyannote-vad"]
        
        for model in models_to_check:
            try:
                model_response = requests.get(f"http://localhost:8000/v2/models/{model}/ready", timeout=3)
                if model_response.status_code == 200:
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å {model} –≥–æ—Ç–æ–≤–∞")
                else:
                    print(f"‚ö†Ô∏è  –ú–æ–¥–µ–ª—å {model} –Ω–µ –≥–æ—Ç–æ–≤–∞ (–∫–æ–¥: {model_response.status_code})")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å {model}: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Triton —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def test_asr_without_vad():
    """–¢–µ—Å—Ç ASR –±–µ–∑ VAD"""
    print("\n" + "="*60)
    print("üé§ –¢–ï–°–¢ ASR –ë–ï–ó VAD")
    print("="*60)
    
    try:
        import onnx_asr
        
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ASR...")
        try:
            asr = onnx_asr.load_model(
                model="gigaam-v2-ctc",
                triton_url="localhost:8000",
                cpu_preprocessing=True,
                path="."  # –ü—É—Ç—å –∫ vocab —Ñ–∞–π–ª—É
            )
            vad = onnx_asr.load_vad("pyannote")
            asr = asr.with_vad(vad)

            print("‚úÖ –ú–æ–¥–µ–ª—å ASR –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ASR: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
            print("  - –§–∞–π–ª v2_vocab.txt –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            print("  - –ú–æ–¥–µ–ª—å gigaam-v2-ctc –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Triton")
            print("  - –ú–æ–¥–µ–ª—å gigaam_preprocessor –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Triton")
            return False
        
        # –¢–µ—Å—Ç 1: –†–µ–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª  
        print("\nüîÑ –¢–µ—Å—Ç 1: –¢–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª")
        try:
            start_time = time.time()
            result = asr.recognize("test.wav", sample_rate=16000)
            processing_time = time.time() - start_time
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
            print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è WAV —Ñ–∞–π–ª–∞: {e}")
            print(f"  üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª test.wav —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        
        # –¢–µ—Å—Ç 2: –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–∏–≥–Ω–∞–ª
        print("\nüîÑ –¢–µ—Å—Ç 2: –ö–æ—Ä–æ—Ç–∫–∏–π —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
        short_audio = create_test_audio(duration=1.0, frequency=440)
        print(f"  –ê—É–¥–∏–æ: {len(short_audio)} —Å—ç–º–ø–ª–æ–≤, {len(short_audio)/16000:.1f} —Å–µ–∫")
        
        try:
            start_time = time.time()
            result = asr.recognize(short_audio, sample_rate=16000)
            processing_time = time.time() - start_time
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
            print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            print(f"  üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Triton —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            return False
        
        # –¢–µ—Å—Ç 3: –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
        print("\nüîÑ –¢–µ—Å—Ç 3: –î–ª–∏–Ω–Ω—ã–π –∞—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª")
        long_audio = create_test_audio(duration=3.0, frequency=350)
        print(f"  –ê—É–¥–∏–æ: {len(long_audio)} —Å—ç–º–ø–ª–æ–≤, {len(long_audio)/16000:.1f} —Å–µ–∫")
        
        try:
            start_time = time.time()
            result = asr.recognize(long_audio, sample_rate=16000)
            processing_time = time.time() - start_time
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}'")
            print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            return False
        
        # –¢–µ—Å—Ç 4: –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print("\nüîÑ –¢–µ—Å—Ç 4: –ë–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∫–∞")
        audio_batch = [
            create_test_audio(duration=0.8, frequency=300),
            create_test_audio(duration=1.2, frequency=500),
            create_test_audio(duration=0.5, frequency=400)
        ]
        
        print(f"  –ë–∞—Ç—á: {len(audio_batch)} –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤")
        
        try:
            start_time = time.time()
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–∞–º
            audio_batch_typed = [np.array(audio, dtype=np.float32) for audio in audio_batch]
            results = asr.recognize(audio_batch_typed, sample_rate=16000)  # type: ignore
            processing_time = time.time() - start_time
            
            print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for i, result in enumerate(results):
                print(f"    {i+1}: '{result}'")
            print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {processing_time:.3f} —Å–µ–∫")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return False
        
        print("\n‚úÖ ASR –±–µ–∑ VAD —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ ASR –±–µ–∑ VAD: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_asr_with_vad():
    """–¢–µ—Å—Ç ASR —Å VAD"""
    print("\n" + "="*60)
    print("üé§üîá –¢–ï–°–¢ ASR –° VAD")
    print("="*60)
    
    try:
        import onnx_asr
        
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ASR...")
        asr = onnx_asr.load_model(
            model="gigaam-v2-ctc",
            triton_url="localhost:8000",
            cpu_preprocessing=True,
            path="."
        )
        
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ VAD...")
        vad = onnx_asr.load_vad(
            model="pyannote",
            triton_url="localhost:8000"
        )
        
        # –°–æ–∑–¥–∞–µ–º ASR —Å VAD
        asr_with_vad = asr.with_vad(vad)
        print("‚úÖ ASR —Å VAD –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –¢–µ—Å—Ç 1: –†–µ–∞–ª—å–Ω—ã–π WAV —Ñ–∞–π–ª
        print("\nüîÑ –¢–µ—Å—Ç 1: –¢–µ—Å—Ç–æ–≤—ã–π WAV —Ñ–∞–π–ª —Å —Ä–µ—á–µ–≤—ã–º–∏ —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏")
        test_audio_path = "test.wav"
        print(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {test_audio_path}")
        
        try:
            start_time = time.time()
            segments = list(asr_with_vad.recognize(test_audio_path, sample_rate=16000))
            processing_time = time.time() - start_time
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WAV —Ñ–∞–π–ª–∞: {e}")
            return False
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")
        for i, segment in enumerate(segments):
            print(f"    –°–µ–≥–º–µ–Ω—Ç {i+1}: '{segment.text}' [{segment.start:.2f}s - {segment.end:.2f}s]")
        print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç 2: –¢–∏—Ö–æ–µ –∞—É–¥–∏–æ (–¥–æ–ª–∂–Ω–æ –Ω–µ –Ω–∞–π—Ç–∏ —Ä–µ—á–∏)
        print("\nüîÑ –¢–µ—Å—Ç 2: –¢–∏—Ö–æ–µ –∞—É–¥–∏–æ (—Ñ–æ–Ω–æ–≤—ã–π —à—É–º)")
        quiet_audio = np.random.normal(0, 0.02, int(16000 * 2)).astype(np.float32)
        print(f"  –ê—É–¥–∏–æ: {len(quiet_audio)} —Å—ç–º–ø–ª–æ–≤, {len(quiet_audio)/16000:.1f} —Å–µ–∫ (—Ç–æ–ª—å–∫–æ —à—É–º)")
        
        start_time = time.time()
        segments = list(asr_with_vad.recognize(quiet_audio, sample_rate=16000))
        processing_time = time.time() - start_time
        
        print(f"  –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {len(segments)}")
        if segments:
            for i, segment in enumerate(segments):
                print(f"    –°–µ–≥–º–µ–Ω—Ç {i+1}: '{segment.text}' [{segment.start:.2f}s - {segment.end:.2f}s]")
        else:
            print("    (—Ä–µ—á—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ)")
        print(f"  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.3f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏ –±–µ–∑ VAD
        print("\nüîÑ –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ASR —Å VAD –∏ –±–µ–∑ VAD")
        test_audio = create_noisy_audio(duration=2.5)
        
        # –ë–µ–∑ VAD
        start_time = time.time()
        result_no_vad = asr.recognize(test_audio, sample_rate=16000)
        time_no_vad = time.time() - start_time
        
        # –° VAD
        start_time = time.time()
        segments_with_vad = list(asr_with_vad.recognize(test_audio, sample_rate=16000))
        time_with_vad = time.time() - start_time
        
        print(f"  –ë–µ–∑ VAD: '{result_no_vad}' (–≤—Ä–µ–º—è: {time_no_vad:.3f}s)")
        print(f"  –° VAD: {len(segments_with_vad)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ (–≤—Ä–µ–º—è: {time_with_vad:.3f}s)")
        for i, segment in enumerate(segments_with_vad):
            print(f"    –°–µ–≥–º–µ–Ω—Ç {i+1}: '{segment.text}' [{segment.start:.2f}s - {segment.end:.2f}s]")
        
        print("\n‚úÖ ASR —Å VAD —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ ASR —Å VAD: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_different_sample_rates():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç–æ—Ç–∞–º–∏ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("üìä –¢–ï–°–¢ –†–ê–ó–ù–´–• –ß–ê–°–¢–û–¢ –î–ò–°–ö–†–ï–¢–ò–ó–ê–¶–ò–ò")
    print("="*60)
    
    try:
        import onnx_asr
        
        asr = onnx_asr.load_model(
            model="gigaam-v2-ctc",
            triton_url="localhost:8000",
            cpu_preprocessing=True,
            path="."
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ)
        from onnx_asr.utils import SampleRates
        from typing import get_args
        
        supported_rates = get_args(SampleRates)
        sample_rates = [sr for sr in [8000, 22050, 44100, 48000] if sr in supported_rates]
        
        for sr in sample_rates:
            print(f"\nüîÑ –¢–µ—Å—Ç —á–∞—Å—Ç–æ—Ç—ã {sr} Hz")
            
            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —á–∞—Å—Ç–æ—Ç–æ–π
            duration = 1.0
            samples = int(sr * duration)
            t = np.linspace(0, duration, samples, endpoint=False)
            audio = np.sin(2 * np.pi * 440 * t).astype(np.float32)
            
            print(f"  –ê—É–¥–∏–æ: {len(audio)} —Å—ç–º–ø–ª–æ–≤ –ø—Ä–∏ {sr} Hz")
            
            try:
                start_time = time.time()
                # –ü—Ä–∏–≤–æ–¥–∏–º sr –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É SampleRates
                result = asr.recognize(audio, sample_rate=sr)  # type: ignore
                processing_time = time.time() - start_time
                
                print(f"  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: '{result}' (–≤—Ä–µ–º—è: {processing_time:.3f}s)")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç —á–∞—Å—Ç–æ—Ç –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —á–∞—Å—Ç–æ—Ç: {e}")
        return False

def test_performance_benchmark():
    """–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n" + "="*60)
    print("‚ö° –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*60)
    
    try:
        import onnx_asr
        
        asr = onnx_asr.load_model(
            model="gigaam-v2-ctc",
            triton_url="localhost:8000",
            cpu_preprocessing=True,
            path="."
        )
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–ª–∏–Ω –∞—É–¥–∏–æ
        durations = [0.5, 1.0, 2.0, 5.0, 10.0]
        
        print("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ | Real-time —Ñ–∞–∫—Ç–æ—Ä")
        print("-" * 50)
        
        for duration in durations:
            audio = create_test_audio(duration=duration, frequency=400)
            
            # –ü—Ä–æ–≥—Ä–µ–≤
            asr.recognize(audio[:int(16000 * 0.1)], sample_rate=16000)
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ
            start_time = time.time()
            result = asr.recognize(audio, sample_rate=16000)
            processing_time = time.time() - start_time
            
            real_time_factor = processing_time / duration
            
            print(f"{duration:8.1f}s   | {processing_time:12.3f}s    | {real_time_factor:12.3f}x")
        
        print("\nüìä Real-time —Ñ–∞–∫—Ç–æ—Ä < 1.0 –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –±—ã—Å—Ç—Ä–µ–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –±–µ–Ω—á–º–∞—Ä–∫–µ: {e}")
        return False

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    missing_deps = []
    
    try:
        import requests
        print("‚úÖ requests")
    except ImportError:
        missing_deps.append("requests")
        print("‚ùå requests")
    
    try:
        import scipy
        print("‚úÖ scipy")
    except ImportError:
        missing_deps.append("scipy")
        print("‚ùå scipy")
    
    try:
        import tritonclient
        print("‚úÖ tritonclient")
    except ImportError:
        missing_deps.append("tritonclient[all]")
        print("‚ùå tritonclient")
    
    if missing_deps:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing_deps)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_deps)}")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ï–†–í–ò–°–ê ASR")
    print("=" * 80)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º Triton-based ASR —Å–µ—Ä–≤–∏—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π VAD")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Triton
    if not test_triton_connection():
        print("\n‚ùå Triton —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("1. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å Triton –∑–∞–ø—É—â–µ–Ω")
        print("2. –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:8000") 
        print("3. –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Triton:")
        print("   - gigaam_preprocessor")
        print("   - gigaam-v2-ctc") 
        print("   - pyannote-vad")
        return
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        ("ASR –±–µ–∑ VAD", test_asr_without_vad),
        ("ASR —Å VAD", test_asr_with_vad),
        ("–†–∞–∑–Ω—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏", test_different_sample_rates),
        ("–ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_performance_benchmark),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\nüîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            success = test_func()
            results.append((test_name, success))
        except KeyboardInterrupt:
            print(f"\n‚ö†Ô∏è –¢–µ—Å—Ç '{test_name}' –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            results.append((test_name, False))
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*80)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name:<35} | {status}")
        if success:
            passed += 1
    
    total = len(results)
    print("-" * 80)
    print(f"–ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Triton –∏ –º–æ–¥–µ–ª–µ–π.")
    
    print("\nüí° –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Triton —Å–µ—Ä–≤–µ—Ä–∞")
    print("- –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: curl localhost:8000/v2/models")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –≤ triton_model_repository/")

if __name__ == "__main__":
    main()
