name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Optional smoke check
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          python -m py_compile app.py cv_analyzer.py || true

      - name: Upload repo to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "."
          target: "${{ secrets.DEPLOY_PATH }}"
          overwrite: true
          rm: true

      - name: Deploy on server (docker compose up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"
            # Если нет .env — создадим из примера
            if [ ! -f .env ] && [ -f env_example ]; then cp env_example .env; fi
            # Убедимся, что внешняя сеть Docker существует (нужна для external: true)
            docker network create ocr_network || true
            docker compose -f docker-compose.yaml pull || true
            docker compose -f docker-compose.yaml up -d --build
            # После перезапуска контейнеров обновим policy routing (обновляет br-* интерфейс)
            if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl restart docker-vpn-policy.service || true
            fi
            docker system prune -f --volumes || true
