name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Optional smoke check
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          python -m py_compile app.py cv_analyzer.py || true

      - name: Prepare target dir with sudo (cleanup + ownership)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            TARGET_PATH="${{ secrets.DEPLOY_PATH }}"
            sudo mkdir -p "$TARGET_PATH"
            sudo chown -R $USER:$USER "$TARGET_PATH"
            # Чистим всё, кроме каталога 3blok, который разворачивается отдельным job
            sudo find "$TARGET_PATH" -mindepth 1 -maxdepth 1 ! -name '3blok' -exec sudo rm -rf {} +

      - name: Upload repo to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.yaml,env_example,services/**,nginx-https/**,kafka-secure/**,database/**,README.md"
          target: "${{ secrets.DEPLOY_PATH }}"
          overwrite: true
          rm: false
          debug: true

      - name: Deploy on server (docker compose up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          command_timeout: 60m
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"
            # Если нет .env — создадим из примера
            if [ ! -f .env ] && [ -f env_example ]; then cp env_example .env; fi
            # Убедимся, что внешняя сеть Docker существует (нужна для external: true)
            docker network create ocr_network || true
            docker compose -f docker-compose.yaml pull cv_ui kafka_rest_producer || true
            # Поднимаем только приложение без зависимостей (Postgres/NGINX управляются отдельно)
            docker compose -f docker-compose.yaml up -d --no-deps --build cv_ui kafka_rest_producer
            # После перезапуска контейнеров обновим policy routing (обновляет br-* интерфейс)
            if command -v systemctl >/dev/null 2>&1; then
              sudo systemctl restart docker-vpn-policy.service || true
            fi
            docker system prune -f --volumes || true

  detect-3blok-changes:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.threeblok }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Filter changes in 3blok
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            threeblok:
              - '3blok/**'

  deploy-3blok:
    needs: [detect-3blok-changes]
    if: needs.detect-3blok-changes.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure ${DEPLOY_PATH}/3blok exists (sudo)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            set -euo pipefail
            sudo mkdir -p "${{ secrets.DEPLOY_PATH }}/3blok"
            sudo chown -R $USER:$USER "${{ secrets.DEPLOY_PATH }}/3blok"

      - name: Upload only 3blok to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "3blok/docker-compose.yml,3blok/**"
          target: "${{ secrets.DEPLOY_PATH }}/3blok"
          overwrite: true
          rm: false
          debug: true

      - name: Deploy 3blok stack (docker compose up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          command_timeout: 90m
          script: |
            set -euo pipefail
            cd "${{ secrets.DEPLOY_PATH }}"
            # Очистим старые логи/артефакты, создадим необходимые директории
            sudo mkdir -p ./3blok/vosk-tts/logs ./3blok/vosk-tts/output
            sudo chown -R $USER:$USER ./3blok/vosk-tts/logs ./3blok/vosk-tts/output
            # Поднятие/обновление сервисов 3blok
            cd ./3blok
            sudo docker compose down || true
            docker compose pull || true
            docker compose up -d --build
